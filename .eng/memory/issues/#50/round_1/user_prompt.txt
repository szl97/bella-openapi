# 项目文件描述


- web/src/components/apikey/apikey-balance.tsx: 无描述

- web/src/lib/types/apikey-balance.ts: 无描述

- web/src/components/apikey/apikey-coloumn.tsx: 这个文件实现了API Key展示组件，提供多种列功能，包括编辑、删除、重置和复制API Key。使用React和相关UI组件实现交互界面，与用户交互的元素较多。

- web/src/app/apikey/page.tsx: 这个文件是 React 组件，用于管理用户的 API key。主要功能包括显示 API key 列表、创建新的 API key，以及在对话框中展示创建成功的 API key。主要交互包括与 API key 信息获取和创建函数的调用。

- web/src/lib/api/apikey.ts: 定义了一系列关于API密钥的异步操作函数，如获取、申请、删除、重置和更新API密钥等。这些函数通过openapi与后端API进行交互。

- web/src/lib/types/openapi.ts: 定义与OpenAPI交互的各类接口，包括分页、用户信息、API密钥信息等，描述数据结构和类型约定。

- api/sdk/src/main/java/com/ke/bella/openapi/apikey/ApikeyInfo.java: 包含ApikeyInfo类，管理API密钥的信息和权限。支持序列化与反序列化，并提供权限检查功能。使用Lombok简化代码。

- api/server/src/main/java/com/ke/bella/openapi/db/repo/ApikeyCostRepo.java: 此文件定义了ApikeyCostRepo类，负责API密钥月度费用的数据库操作。提供插入、更新费用及查询功能。与APIKEY_MONTH_COST表进行交互，并支持跨事务操作。

- api/server/src/main/java/com/ke/bella/openapi/endpoints/ApikeyController.java: API密钥控制器，提供创建、查询和权限检查的API接口，通过ApikeyService与服务交互。

- api/server/src/main/java/com/ke/bella/openapi/service/ApikeyService.java: API key管理服务。提供API key的创建、更新、验证和权限检查等功能，使用缓存和数据库进行存储和校验。


# 文件内容



```
File: web/src/components/apikey/apikey-balance.tsx
1 import React, { useState, useEffect } from 'react';
2 import { getApiKeyBalance } from '@/lib/api/apikey';
3 import { ApiKeyBalance } from '@/lib/types/apikey-balance';
4 import {
5   Dialog,
6   DialogContent,
7   DialogDescription,
8   DialogHeader,
9   DialogTitle,
10 } from "@/components/ui/dialog";
11 import { Button } from '@/components/ui/button';
12 import { Badge } from '@/components/ui/badge';
13 import { CircleDollarSign, AlertCircle, CheckCircle2 } from 'lucide-react';
14 
15 interface ApiKeyBalanceDialogProps {
16   code: string;
17   isOpen: boolean;
18   onClose: () => void;
19 }
20 
21 interface ApiKeyBalanceIndicatorProps {
22   code: string;
23 }
24 
25 export const ApiKeyBalanceIndicator: React.FC<ApiKeyBalanceIndicatorProps> = ({ code }) => {
26   const [balance, setBalance] = useState<ApiKeyBalance | null>(null);
27   const [loading, setLoading] = useState<boolean>(true);
28   const [error, setError] = useState<boolean>(false);
29 
30   useEffect(() => {
31     if (code) {
32       setLoading(true);
33       setError(false);
34       getApiKeyBalance(code)
35         .then((data) => {
36           if (data) {
37             setBalance(data);
38           } else {
39             setError(true);
40           }
41         })
42         .catch(() => {
43           setError(true);
44         })
45         .finally(() => {
46           setLoading(false);
47         });
48     }
49   }, [code]);
50 
51   if (loading) {
52     return <div className="flex justify-center"><div className="h-5 w-5 animate-pulse bg-gray-200 rounded-full"></div></div>;
53   }
54 
55   if (error || !balance) {
56     return <Badge variant="outline" className="bg-gray-100 text-gray-500">未知</Badge>;
57   }
58 
59   const usagePercentage = (balance.cost / balance.quota) * 100;
60   
61   if (usagePercentage >= 80) {
62     return (
63       <Badge className="bg-red-100 text-red-800 flex items-center gap-1">
64         <AlertCircle className="h-3 w-3" /> 余额紧张 ({Math.round(usagePercentage)}%)
65       </Badge>
66     );
67   }
68   
69   return <Badge className="bg-green-100 text-green-800 flex items-center gap-1"><CheckCircle2 className="h-3 w-3" /> 余额充足</Badge>;
70 };
71 
72 export const ApiKeyBalanceDialog: React.FC<ApiKeyBalanceDialogProps> = ({ 
73   code, 
74   isOpen, 
75   onClose 
76 }) => {
77   const [balance, setBalance] = useState<ApiKeyBalance | null>(null);
78   const [loading, setLoading] = useState<boolean>(false);
79   const [error, setError] = useState<string | null>(null);
80 
81   useEffect(() => {
82     if (isOpen && code) {
83       setLoading(true);
84       setError(null);
85       getApiKeyBalance(code)
86         .then((data) => {
87           if (data) {
88             setBalance(data);
89           } else {
90             setError('无法获取余额信息');
91           }
92         })
93         .catch(err => {
94           console.error('Failed to fetch balance:', err);
95           setError('获取余额信息时发生错误');
96         })
97         .finally(() => {
98           setLoading(false);
99         });
100     }
101   }, [isOpen, code]);
102 
103   return (
104     <Dialog open={isOpen} onOpenChange={onClose}>
105       <DialogContent className="sm:max-w-md">
106         <DialogHeader>
107           <DialogTitle>API Key 余额详情</DialogTitle>
108           <DialogDescription>当前月份的使用情况和剩余额度</DialogDescription>
109         </DialogHeader>
110         <div className="py-4">
111           {loading ? (
112             <div className="flex justify-center items-center p-8">
113               <div className="animate-spin rounded-full h-8 w-8 border-4 border-blue-500 border-t-transparent"></div>
114             </div>
115           ) : error ? (
116             <div className="flex items-center justify-center text-red-500 p-4"><AlertCircle className="h-5 w-5 mr-2" />{error}</div>
117           ) : balance && (
118             <div className="space-y-4 p-4 bg-gray-50 rounded-lg border border-gray-200">
119               <div className="grid grid-cols-2 gap-4 text-sm">
120                 <div className="font-medium text-gray-500">月份</div>
121                 <div>{balance.month}</div>
122                 <div className="font-medium text-gray-500">总额度</div>
123                 <div>{new Intl.NumberFormat("zh-CN", { style: "currency", currency: "CNY" }).format(balance.quota)}</div>
124                 <div className="font-medium text-gray-500">已使用</div>
125                 <div>{new Intl.NumberFormat("zh-CN", { style: "currency", currency: "CNY" }).format(balance.cost)}</div>
126                 <div className="font-medium text-gray-500">剩余额度</div>
127                 <div className={`font-semibold ${balance.balance < balance.quota * 0.2 ? 'text-red-600' : 'text-green-600'}`}>
128                   {new Intl.NumberFormat("zh-CN", { style: "currency", currency: "CNY" }).format(balance.balance)}
129                 </div>
130               </div>
131               <div className={`text-sm mt-4 p-2 rounded ${balance.balance < balance.quota * 0.2 ? 'bg-red-50 text-red-800' : 'bg-green-50 text-green-800'}`}>
132                 {balance.balance < balance.quota * 0.2 ? (
133                   <p className="flex items-center"><AlertCircle className="h-4 w-4 mr-2" />余额不足，请考虑增加额度</p>
134                 ) : (
135                   <p>余额充足</p>
136                 )}
137               </div>
138             </div>
139           )}
140         </div>
141         <div className="flex justify-end">
142           <Button onClick={onClose}>关闭</Button>
143         </div>
144       </DialogContent>
145     </Dialog>
146   );
147 };
148
```




```
File: web/src/lib/types/apikey-balance.ts
1 export interface ApiKeyBalance {
2   akCode: string;
3   month: string;
4   cost: number;
5   quota: number;
6   balance: number;
7 }
8
```




```
File: web/src/components/apikey/apikey-coloumn.tsx
1 'use client'
2 
3 import React, {ReactNode, useEffect, useRef, useState} from "react"
4 import {ColumnDef} from "@tanstack/react-table"
5 import {ApikeyInfo} from "@/lib/types/openapi"
6 import {Tooltip, TooltipContent, TooltipProvider, TooltipTrigger} from "@/components/ui/tooltip"
7 import {CertifyDialog, DeleteDialog, QuotaDialog, RenameDialog, ResetDialog} from "./apikey-dialog"
8 import {HoverContext} from "@/components/ui/data-table";
9 import {Badge} from "@/components/ui/badge"
10 import {Button} from "@/components/ui/button"
11 import {Copy, Wallet} from 'lucide-react'
12 import {useToast} from "@/hooks/use-toast";
13 import {safety_apply_url} from "@/config";
14 import {ApiKeyBalanceDialog, ApiKeyBalanceIndicator} from "./apikey-balance";
15 
16 interface EditableCellProps {
17     content: ReactNode;
18     dialogComponent: (isOpen: boolean, onClose: () => void) => React.ReactElement;
19     positionCalc: string;
20     rowId: string;
21 }
22 
23 const EditableCell: React.FC<EditableCellProps> = ({ content, dialogComponent, positionCalc, rowId }) => {
24     const hoveredRowId = React.useContext(HoverContext);
25     const [isDialogOpen, setIsDialogOpen] = useState(false);
26     const contentRef = useRef<HTMLSpanElement>(null);
27     const [iconPosition, setIconPosition] = useState(0);
28 
29     useEffect(() => {
30         if (contentRef.current) {
31             const contentWidth = contentRef.current.offsetWidth;
32             setIconPosition(contentWidth / 2 + 5);
33         }
34     }, [content]);
35 
36     const showButton = hoveredRowId === rowId || isDialogOpen;
37 
38     return (
39         <div className="relative flex justify-center items-center w-full">
40             <span ref={contentRef} className="font-medium">{content}</span>
41             {showButton && (
42                 <div style={{ position: 'absolute', left: `calc(${positionCalc} + ${iconPosition}px)` }}>
43                     {dialogComponent(isDialogOpen, () => setIsDialogOpen(!isDialogOpen))}
44                 </div>
45             )}
46         </div>
47     );
48 };
49 
50 
51 const RemarkCell = ({ value }: { value: string }) => {
52     const remark = value || '/'
53     return (
54         <TooltipProvider>
55             <Tooltip>
56                 <TooltipTrigger asChild>
57                     <div className="truncate max-w-xs cursor-help">{remark}</div>
58                 </TooltipTrigger>
59                 <TooltipContent side="bottom" className="w-64 break-words">
60                     <p>{remark}</p>
61                 </TooltipContent>
62             </Tooltip>
63         </TooltipProvider>
64     )
65 }
66 
67 const ActionCell = ({code, refresh, showApikey}: { code: string, refresh: () => void, showApikey: (apikey: string) => void }) => {
68     const { toast } = useToast();
69     const [showBalance, setShowBalance] = useState(false);
70     
71     const copyToClipboard = () => {
72         navigator.clipboard.writeText(code).then(() => {
73             toast({ title: "复制成功", description: "API Key编码复制成功。" })
74         });
75     };
76 
77     
78     return (
79         <div className="flex flex-wrap justify-end gap-2">
80             <Button onClick={copyToClipboard} variant="ghost" size="icon" className="p-0 focus:ring-0">
81                 <TooltipProvider>
82                     <Tooltip>
83                         <TooltipTrigger asChild>
84                             <div>
85                                 <Copy className="h-4 w-4" />
86                                 <span className="sr-only">复制ak code</span>
87                             </div>
88                         </TooltipTrigger>
89                         <TooltipContent>
90                             <p>复制ak code</p>
91                         </TooltipContent>
92                     </Tooltip>
93                 </TooltipProvider>
94             </Button>
95             <DeleteDialog code={code} refresh={refresh}/>
96             <ResetDialog code={code} showApikey={showApikey}/>
97             <Button 
98                 onClick={() => setShowBalance(true)} 
99                 variant="ghost" 
100                 size="icon" 
101                 className="p-0 focus:ring-0"
102             >
103                 <TooltipProvider>
104                     <Tooltip>
105                         <TooltipTrigger asChild>
106                             <div>
107                                 <Wallet className="h-4 w-4" />
108                                 <span className="sr-only">查看余额</span>
109                             </div>
110                         </TooltipTrigger>
111                         <TooltipContent>查看余额</TooltipContent>
112                     </Tooltip>
113                 </TooltipProvider>
114             </Button>
115             <ApiKeyBalanceDialog code={code} isOpen={showBalance} onClose={() => setShowBalance(false)} />
116         </div>
117     )
118 }
119 
120 function getSafetyLevel(level: number) : string {
121     switch (level) {
122         case 10:
123             return "极低";
124         case 20:
125             return "低";
126         case 30:
127             return "中";
128         case 40:
129             return "高";
130         default:
131             return "N/A";
132     }
133 }
134 
135 export const ApikeyColumns = (refresh: () => void, showApikey: (apikey : string) => void): ColumnDef<ApikeyInfo>[] => [
136     {
137         accessorKey: "akDisplay",
138         header: "AK",
139         cell: ({row}) =>
140             (<div className="font-mono text-sm">
141                 {row.original.akDisplay}
142             </div>)
143         ,
144     },
145     {
146         accessorKey: "name",
147         header: "名称",
148         cell: ({row}) => (
149             <EditableCell
150                 content={row.original.name}
151                 dialogComponent={(isOpen, onClose) => (
152                     <RenameDialog
153                         code={row.original.code}
154                         origin={row.original.name}
155                         refresh={refresh}
156                         isOpen={isOpen}
157                         onClose={onClose}
158                     />
159                 )}
160                 positionCalc="50%"
161                 rowId={row.id}
162             />
163         ),
164     },
165     {
166         accessorKey: "serviceId",
167         header:
168             "服务名",
169         cell:
170             ({row}) => <div>{row.getValue("serviceId")}</div>,
171     },
172     {
173         accessorKey: "safetyLevel",
174         header: "安全等级",
175         cell: ({row}) => {
176             const level = row.original.safetyLevel as number;
177             let color = "bg-green-100 text-green-800";
178             if (level == 1) {
179                 color = "bg-yellow-100 text-yellow-800";
180             }
181             if (level == 0) {
182                 color = "bg-red-100 text-red-800";
183             }
184 
185             return (
186                 safety_apply_url ?
187                 <EditableCell
188                     content={<Badge className={`${color} capitalize`}>{getSafetyLevel(level)}
189                 </Badge>}
190                     dialogComponent={(isOpen, onClose) => (
191                         <CertifyDialog
192                             code={row.original.code}
193                             refresh={refresh}
194                             isOpen={isOpen}
195                             onClose={onClose}
196                         />
197                     )}
198                     positionCalc="60%"
199                     rowId={row.id}
200                 /> : <Badge className={`${color} capitalize`}>{getSafetyLevel(level)}
201                     </Badge>
202             );
203         },
204     },
205     {
206         accessorKey: "monthQuota",
207         header: "每月额度",
208         cell: ({row}) => {
209             const formatted = new Intl.NumberFormat("zh-CN", {
210                 style: "currency",
211                 currency: "CNY",
212             }).format(row.original.monthQuota);
213 
214             return (
215                 <EditableCell
216                     content={formatted}
217                     dialogComponent={(isOpen, onClose) => (
218                         <QuotaDialog
219                             code={row.original.code}
220                             origin={row.original.monthQuota}
221                             refresh={refresh}
222                             isOpen={isOpen}
223                             onClose={onClose}
224                         />
225                     )}
226                     positionCalc="50%"
227                     rowId={row.id}
228                 />
229             );
230         }
231     },
232     {
233         accessorKey: "code",
234         header: "余额状态",
235         cell: ({row}) => 
236             <ApiKeyBalanceIndicator code={row.original.code} />
237     },
238     {
239         accessorKey: "remark",
240         header: "备注",
241         cell: ({row}) => <RemarkCell value={row.original.remark}/>,
242     },
243     {
244         id: "actions",
245         header: "",
246         cell: ({row}) => (
247             <ActionCell code={row.original.code} refresh={refresh} showApikey={showApikey}/>
248         ),
249     },
250 ]
```




```
File: web/src/app/apikey/page.tsx
1 'use client'
2 
3 import React, { useEffect, useState } from "react"
4 import { DataTable } from "@/components/ui/data-table"
5 import { getApikeyInfos, applyApikey, getApiKeyBalance } from "@/lib/api/apikey"
6 import { ApikeyColumns } from "@/components/apikey/apikey-coloumn"
7 import { ApikeyInfo } from "@/lib/types/openapi"
8 import { ClientHeader } from "@/components/user/client-header"
9 import { Button } from "@/components/ui/button"
10 import { Input } from "@/components/ui/input"
11 import { Search, Plus, ChevronLeft, ChevronRight, Copy, Check } from "lucide-react"
12 import { useUser } from "@/lib/context/user-context"
13 import { useToast } from "@/hooks/use-toast"
14 import {ToastAction} from "@/components/ui/toast"
15 import {
16     Dialog,
17     DialogContent,
18     DialogDescription,
19     DialogFooter,
20     DialogHeader,
21     DialogTitle,
22 } from "@/components/ui/dialog"
23 import { ApiKeyBalanceSummary } from "@/components/apikey/apikey-balance"
24 
25 const ApikeyPage: React.FC = () => {
26     const [page, setPage] = useState<number>(1)
27     const [data, setData] = useState<ApikeyInfo[] | null>(null)
28     const [totalPages, setTotalPages] = useState<number>(1)
29     const [isLoading, setIsLoading] = useState<boolean>(true)
30     const [searchTerm, setSearchTerm] = useState<string>("")
31     const [newApiKey, setNewApiKey] = useState<string | null>(null)
32     const [showDialog, setShowDialog] = useState<boolean>(false)
33     const [copied, setCopied] = useState<boolean>(false)
34     const { userInfo } = useUser()
35     const { toast } = useToast()
36 
37     const refresh = async () => {
38         setIsLoading(true)
39         if (userInfo) {
40             try {
41                 const res = await getApikeyInfos(page, userInfo?.userId || null, searchTerm || null)
42                 setData(res?.data || null)
43                 if (res) {
44                     setTotalPages(Math.ceil(res.total / 10))
45                 } else {
46                     setTotalPages(1)
47                 }
48             } catch (error) {
49                 console.error('Failed to fetch API keys:', error)
50                 setData(null)
51             } finally {
52                 setIsLoading(false)
53             }
54         }
55     }
56 
57     const showApikey = async (apikey : string)  => {
58         await refresh()
59         setNewApiKey(apikey)
60         setShowDialog(true)
61         setCopied(false)
62     }
63 
64     useEffect(() => {
65         refresh()
66     }, [page, userInfo])
67 
68     const handlePageChange = (newPage: number) => {
69         setPage(newPage)
70     }
71 
72     const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
73         setSearchTerm(event.target.value)
74     }
75 
76     const handleSearchSubmit = (event: React.FormEvent<HTMLFormElement>) => {
77         event.preventDefault()
78         setPage(1)
79         refresh()
80     }
81 
82     const handleCopyApiKey = () => {
83         if (newApiKey) {
84             navigator.clipboard.writeText(newApiKey).then(() => {
85                 setCopied(true)
86                 setTimeout(() => setCopied(false), 2000)
87                 toast({
88                     title: "已复制",
89                     description: "API Key 已复制到剪贴板",
90                 })
91             }).catch(err => {
92                 console.error('复制失败:', err)
93                 toast({
94                     title: "复制失败",
95                     description: "无法复制到剪贴板，请手动复制",
96                     variant: "destructive",
97                 })
98             })
99         }
100     }
101 
102     const handleCreateApiKey = async () => {
103         if (!userInfo) {
104             toast({
105                 title: "错误",
106                 description: "用户未登录，无法创建 API Key",
107                 variant: "destructive",
108             })
109             return
110         }
111 
112         try {
113             setIsLoading(true)
114             const apikey = await applyApikey(userInfo.userId.toString(), userInfo.userName)
115             if (apikey) {
116                 showApikey(apikey)
117             } else {
118                 toast({
119                     title: "错误",
120                     description: "创建 API Key 失败",
121                     variant: "destructive",
122                 })
123             }
124         } catch (error) {
125             console.error('Failed to create API key:', error)
126             toast({
127                 title: "错误",
128                 description: "创建 API Key 时发生错误",
129                 variant: "destructive",
130             })
131         } finally {
132             setIsLoading(false)
133         }
134     }
135 
136     const columns = ApikeyColumns(refresh, showApikey)
137 
138     return (
139         <div className="min-h-screen bg-gray-50">
140             <ClientHeader title='API Key 管理'/>
141             <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8">
142                 <div className="p-6">
143                     <div className="mb-4 flex justify-between items-center">
144                         <div className="flex-1">
145                             {data && data.length > 0 && (
146                                 <ApiKeyBalanceSummary apikeys={data} />
147                             )}
148                         </div>
149                         <div className="flex gap-4">
150                         <form onSubmit={handleSearchSubmit} className="relative">
151                             <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
152                             <Input
153                                 type="text"
154                                 placeholder="搜索 API Key 名称"
155                                 value={searchTerm}
156                                 onChange={handleSearch}
157                                 className="pl-10 w-64"
158                             />
159                         </form>
160                         <Button onClick={handleCreateApiKey} className="bg-gray-700 hover:bg-gray-900 text-white">
161                             <Plus className="h-4 w-4 mr-2" />
162                             创建 API Key
163                         </Button>
164                         </div>
165                     </div>
166 
167                     {isLoading ? (
168                         <div className="flex justify-center items-center h-64">
169                             <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-500 border-t-transparent"></div>
170                         </div>
171                     ) : data ? (
172                         <DataTable columns={columns} data={data}/>
173                     ) : (
174                         <p className="text-center text-gray-500">No API keys found.</p>
175                     )}
176                     <div className="mt-6 flex items-center justify-between">
177                         <div className="flex items-center space-x-2">
178                             <Button
179                                 onClick={() => handlePageChange(page - 1)}
180                                 disabled={page === 1 || isLoading}
181                                 variant="outline"
182                                 size="sm"
183                                 className="text-gray-600 hover:bg-gray-50 border-gray-200"
184                             >
185                                 <ChevronLeft className="h-4 w-4 mr-2"/>
186                                 上一页
187                             </Button>
188                             <Button
189                                 onClick={() => handlePageChange(page + 1)}
190                                 disabled={page === totalPages || isLoading}
191                                 variant="outline"
192                                 size="sm"
193                                 className="text-gray-600 hover:bg-gray-50 border-gray-200"
194                             >
195                                 下一页
196                                 <ChevronRight className="h-4 w-4 ml-2"/>
197                             </Button>
198                         </div>
199                         <span className="text-sm text-gray-600">
200                             第 {page} 页，共 {totalPages} 页
201                         </span>
202                     </div>
203                 </div>
204             </div>
205 
206             {/* API Key 创建成功弹窗 */}
207             <Dialog open={showDialog} onOpenChange={setShowDialog}>
208                 <DialogContent className="sm:max-w-md bg-white dark:bg-gray-800 border-0">
209                     <DialogHeader>
210                         <DialogTitle className="text-center text-xl font-semibold">API Key 创建成功</DialogTitle>
211                         <DialogDescription className="text-center pt-2">
212                             <div className="space-y-4 mt-2">
213                                 <div className="bg-blue-50 dark:bg-blue-900/30 p-3 rounded-md border border-blue-100 dark:border-blue-800">
214                                     <p className="text-sm font-medium text-blue-800 dark:text-blue-300">
215                                         请保存您的API Key，它只会显示一次。关闭此窗口后将无法再次查看完整的API Key。
216                                     </p>
217                                 </div>
218                             </div>
219                         </DialogDescription>
220                     </DialogHeader>
221                     <div className="flex flex-col items-center mt-6">
222                         <div className="w-full bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg p-4 shadow-sm">
223                             <div className="bg-white dark:bg-gray-800 p-4 rounded-md font-mono text-sm break-all border border-gray-100 dark:border-gray-700 shadow-inner">
224                                 {newApiKey}
225                             </div>
226                         </div>
227                         <div className="flex items-center mt-4 text-amber-600 dark:text-amber-500">
228                             <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
229                                 <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9z" clipRule="evenodd" />
230                             </svg>
231                             <p className="text-sm">
232                                 请妥善保管您的API Key，不要与他人分享。
233                             </p>
234                         </div>
235                         <div className="bg-amber-50 dark:bg-amber-900/30 p-3 rounded-md border border-amber-100 dark:border-amber-800">
236                             <p className="text-sm font-medium text-amber-800 dark:text-amber-300">
237                                 此API Key 仅用于openapi的接口请求鉴权。后续申请额度等操作，需要填写的并非此apikey，而是<span className="font-bold underline">ak code</span>（即apikey的id，不是用于身份验证的密钥），获取方式为：点击每一行操作栏中的复制按钮。
238                             </p>
239                         </div>
240                     </div>
241                     <DialogFooter className="flex flex-col sm:flex-row gap-3 mt-6">
242                         <Button
243                             type="button"
244                             variant="outline"
245                             onClick={handleCopyApiKey}
246                             className="w-full relative overflow-hidden group"
247                         >
248                             <span className={`absolute inset-0 flex items-center justify-center transition-opacity duration-300 ${copied ? 'opacity-100' : 'opacity-0'}`}>
249                                 <Check className="h-4 w-4 mr-2" />
250                                 已复制
251                             </span>
252                             <span className={`flex items-center justify-center transition-opacity duration-300 ${copied ? 'opacity-0' : 'opacity-100'}`}>
253                                 <Copy className="h-4 w-4 mr-2" />
254                                 复制API Key
255                             </span>
256                         </Button>
257                         <Button
258                             type="button"
259                             onClick={() => setShowDialog(false)}
260                             className="w-full bg-gray-800 hover:bg-gray-900"
261                         >
262                             确认并关闭
263                         </Button>
264                     </DialogFooter>
265                 </DialogContent>
266             </Dialog>
267         </div>
268     )
269 }
270 
271 export default ApikeyPage
272
```




```
File: web/src/lib/api/apikey.ts
1 import { ApikeyInfo, Page} from "@/lib/types/openapi";
2 import { openapi } from '@/lib/api/openapi';
3 import { ApiKeyBalance } from "@/lib/types/apikey-balance";
4 
5 export async function getApikeyInfos(page: number, ownerCode: number | null, search: string | null): Promise<Page<ApikeyInfo> | null> {
6     try {
7         const response = await openapi.get<Page<ApikeyInfo>>(`/console/apikey/page`, {
8             params: { status: 'active', ownerType:'person', ownerCode: ownerCode, searchParam: search, page }
9         });
10         return response.data;
11     } catch (error) {
12         console.error('Error fetching api:', error);
13         throw error;
14     }
15 }
16 
17 export async function applyApikey(ownerCode: string, ownerName: string): Promise<string> {
18     const response = await openapi.post<string>(`/console/apikey/apply`,
19         {ownerType:'person', ownerCode: ownerCode, ownerName: ownerName, monthQuota: 50});
20     return response.data;
21 }
22 
23 export async function deleteApikey(code: string): Promise<boolean> {
24     const response = await openapi.post<boolean>(`/console/apikey/inactivate`, { code });
25     return response.data ?? false;
26 }
27 
28 export async function resetApikey(code: string): Promise<string | null> {
29     const response = await openapi.post<string>(`/console/apikey/reset`, { code });
30     return response.data || null;
31 }
32 
33 export async function updateCertify(code: string, certifyCode: string): Promise<boolean> {
34     const response = await openapi.post<boolean>('/console/apikey/certify', { code, certifyCode });
35     return response.data ?? false;
36 }
37 
38 export async function updateQuota(code: string, monthQuota: number): Promise<boolean> {
39     const response = await openapi.post<boolean>('/console/apikey/quota/update', { code, monthQuota });
40     return response.data ?? false;
41 }
42 
43 export async function rename(code: string, name: string): Promise<boolean> {
44     const response = await openapi.post<boolean>('/console/apikey/rename', { code, name });
45     return response.data ?? false;
46 }
47 
48 export async function getApiKeyBalance(code: string): Promise<ApiKeyBalance | null> {
49     try {
50         const response = await openapi.get<ApiKeyBalance>(`/console/apikey/balance/${code}`);
51         return response.data;
52     } catch (error) {
53         console.error('Error fetching apikey balance:', error);
54         return null;
55     }
56 }
57
```




```
File: web/src/lib/types/openapi.ts
1 export interface BellaResponse<T> {
2     code?: number;
3     message?: string;
4     timestamp?: number;
5     data?: T;
6     stacktrace?: string;
7 }
8 
9 
10 export interface Page<T> {
11     data?: T[];
12     has_more: boolean;
13     page: number;
14     limit: number;
15     total: number;
16 }
17 
18 export interface UserInfo {
19     userId: number;
20     userName: string;
21     image?: string;
22     optionalInfo: Record<string, any>
23 }
24 
25 export interface ApikeyInfo {
26     code: string;
27     serviceId: string;
28     akSha: string;
29     akDisplay: string;
30     name: string;
31     outEntityCode: string;
32     parentCode: string;
33     ownerType: string;
34     ownerCode: string;
35     ownerName: string;
36     roleCode: string;
37     safetyLevel: number;
38     monthQuota: number;
39     rolePath?: RolePath;
40     status: string;
41     remark: string;
42     userId: number;
43 }
44 
45 export interface RolePath {
46     included: string[];
47     excluded?: string[];
48 }
49 
50 
51 export interface Category {
52     id: number;
53     categoryCode: string;
54     categoryName: string;
55     parentCode: string;
56     status: string;
57     cuid: number;
58     cuName: string;
59     muid: number;
60     muName: string;
61     ctime: string;
62     mtime: string;
63 }
64 
65 export interface Endpoint {
66     endpoint: string;
67     endpointCode: string;
68     endpointName: string;
69     maintainerCode: string;
70     maintainerName: string;
71     status: string;
72     cuid: number;
73     cuName: string;
74     muid: number;
75     muName: string;
76     ctime: string;
77     mtime: string;
78     documentUrl?: string;
79 }
80 
81 export interface CategoryTree {
82     categoryCode: string;
83     categoryName: string;
84     endpoints: Endpoint[] | null;
85     children: CategoryTree[] | null;
86 }
87 
88 export interface MetadataFeature {
89     code: string;
90     name: string;
91 }
92 
93 export interface Model {
94     modelName: string;
95     documentUrl: string;
96     properties: string;
97     features: string;
98     ownerType: string;
99     ownerCode:string;
100     ownerName: string;
101     visibility: string;
102     status: string;
103     linkedTo: string;
104     endpoints: string[];
105     priceDetails: PriceDetails;
106     terminalModel: string;
107 }
108 
109 export interface Channel {
110     entityType: string;
111     entityCode: string;
112     channelCode: string;
113     status: string;
114     trialEnabled: number;
115     dataDestination: string;
116     priority: string;
117     protocol: string;
118     supplier: string;
119     url: string;
120     channelInfo: string;
121     priceInfo: string;
122     ownerType?: string;
123     ownerCode?: string;
124     ownerName?: string;
125     visibility?: string;
126 }
127 
128 export interface ModelDetails {
129     model: Model;
130     channels: Channel[];
131 }
132 
133 export interface EndpointDetails {
134     endpoint: string;
135     models: Model[];
136     features: MetadataFeature[];
137     priceDetails: PriceDetails;
138 }
139 
140 export interface PriceDetails {
141     displayPrice: Record<string, string>;
142     unit: string;
143 }
144 
145 export interface TypeSchema {
146     code: string;
147     name: string;
148     valueType: string;
149     selections: string[]
150     child?: JsonSchema;
151 }
152 
153 export interface JsonSchema {
154     params: TypeSchema[];
155 }
156 
157 export interface MonitorData {
158     time: string;
159     channel_code: string;
160     metrics: Record<string, number>;
161 }
162 
163 export interface VoiceProperties {
164     voiceTypes: Record<string, string>;
165 }
166 
167
```




```
File: api/sdk/src/main/java/com/ke/bella/openapi/apikey/ApikeyInfo.java
1 package com.ke.bella.openapi.apikey;
2 
3 import com.fasterxml.jackson.annotation.JsonIgnore;
4 import com.ke.bella.openapi.utils.JacksonUtils;
5 import com.ke.bella.openapi.utils.MatchUtils;
6 import lombok.AllArgsConstructor;
7 import lombok.Builder;
8 import lombok.Data;
9 import lombok.NoArgsConstructor;
10 
11 import java.io.Serializable;
12 import java.math.BigDecimal;
13 import java.util.ArrayList;
14 import java.util.List;
15 
16 @Data
17 @Builder
18 @NoArgsConstructor
19 @AllArgsConstructor
20 public class ApikeyInfo implements Serializable {
21     private static final long serialVersionUID = 1L;
22     private String apikey;
23     private String code;
24     private String serviceId;
25     private String akSha;
26     private String akDisplay;
27     private String name;
28     private String outEntityCode;
29     private String parentCode;
30     private String ownerType;
31     private String ownerCode;
32     private String ownerName;
33     private String roleCode;
34     @JsonIgnore
35     private String path;
36     private String safetySceneCode;
37     private Byte safetyLevel;
38     private BigDecimal monthQuota;
39     private RolePath rolePath;
40     private String status;
41     private String remark;
42     private Long userId;
43     private ApikeyInfo parentInfo;
44 
45     public RolePath getRolePath() {
46         if(rolePath != null) {
47             return rolePath;
48         }
49         if(path == null) {
50             return new RolePath();
51         }
52         rolePath = JacksonUtils.deserialize(path, RolePath.class);
53         return rolePath;
54     }
55 
56     public boolean hasPermission(String url) {
57        return getRolePath().getIncluded().stream().anyMatch(pattern -> MatchUtils.matchUrl(pattern, url))
58                 && getRolePath().getExcluded().stream().noneMatch(pattern -> MatchUtils.matchUrl(pattern, url));
59     }
60 
61     @Data
62     public static class RolePath implements Serializable {
63         private static final long serialVersionUID = 1L;
64         private List<String> included = new ArrayList<>();
65         private List<String> excluded = new ArrayList<>();
66     }
67 }
68
```




```
File: api/server/src/main/java/com/ke/bella/openapi/db/repo/ApikeyCostRepo.java
1 package com.ke.bella.openapi.db.repo;
2 
3 import static com.ke.bella.openapi.Tables.*;
4 
5 import java.math.BigDecimal;
6 import java.util.List;
7 
8 import javax.annotation.Resource;
9 
10 import org.jooq.DSLContext;
11 import org.springframework.stereotype.Component;
12 import org.springframework.transaction.annotation.Transactional;
13 
14 import com.ke.bella.openapi.tables.pojos.ApikeyMonthCostDB;
15 import com.ke.bella.openapi.tables.records.ApikeyMonthCostRecord;
16 
17 @Component
18 public class ApikeyCostRepo implements BaseRepo {
19     @Resource
20     private DSLContext db;
21 
22     @Transactional
23     public void insert(String akCode, String month) {
24         ApikeyMonthCostRecord rec = APIKEY_MONTH_COST.newRecord();
25         rec.setAkCode(akCode);
26         rec.setMonth(month);
27         rec.setAmount(BigDecimal.ZERO);
28 
29         db.insertInto(APIKEY_MONTH_COST).set(rec)
30                 .onDuplicateKeyIgnore()
31                 .execute();
32     }
33 
34     @Transactional
35     public void increment(String akCode, String month, BigDecimal cost) {
36         db.update(APIKEY_MONTH_COST)
37                 .set(APIKEY_MONTH_COST.AMOUNT, APIKEY_MONTH_COST.AMOUNT.add(cost))
38                 .where(APIKEY_MONTH_COST.AK_CODE.eq(akCode))
39                 .and(APIKEY_MONTH_COST.MONTH.eq(month))
40                 .execute();
41     }
42 
43     public BigDecimal queryCost(String akCode, String month) {
44         return db.select(APIKEY_MONTH_COST.AMOUNT)
45                 .from(APIKEY_MONTH_COST)
46                 .where(APIKEY_MONTH_COST.AK_CODE.eq(akCode))
47                 .and(APIKEY_MONTH_COST.MONTH.eq(month))
48                 .fetchOneInto(BigDecimal.class);
49     }
50 
51     public BigDecimal refreshCache(String akCode, String month) {
52         return queryCost(akCode, month);
53     }
54 
55     public List<ApikeyMonthCostDB> queryByAkCode(String akCode) {
56         return db.selectFrom(APIKEY_MONTH_COST)
57                 .where(APIKEY_MONTH_COST.AK_CODE.eq(akCode))
58                 .fetchInto(ApikeyMonthCostDB.class);
59     }
60 }
61
```




```
File: api/server/src/main/java/com/ke/bella/openapi/endpoints/ApikeyController.java
1 package com.ke.bella.openapi.endpoints;
2 
3 import com.ke.bella.openapi.EndpointContext;
4 import com.ke.bella.openapi.annotations.BellaAPI;
5 import com.ke.bella.openapi.apikey.ApikeyCreateOp;
6 import com.ke.bella.openapi.apikey.ApikeyInfo;
7 import com.ke.bella.openapi.service.ApikeyService;
8 import io.swagger.v3.oas.annotations.tags.Tag;
9 import org.apache.commons.collections4.CollectionUtils;
10 import org.apache.commons.lang3.StringUtils;
11 import org.springframework.beans.factory.annotation.Autowired;
12 import org.springframework.util.Assert;
13 import org.springframework.web.bind.annotation.GetMapping;
14 import org.springframework.web.bind.annotation.PostMapping;
15 import org.springframework.web.bind.annotation.RequestBody;
16 import org.springframework.web.bind.annotation.RequestMapping;
17 import org.springframework.web.bind.annotation.RequestParam;
18 import org.springframework.web.bind.annotation.RestController;
19 
20 @BellaAPI
21 @RestController
22 @RequestMapping("/v1/apikey")
23 @Tag(name = "信息查询")
24 public class ApikeyController {
25 
26     @Autowired
27     private ApikeyService as;
28 
29     @PostMapping("/create")
30     public String createApikey(@RequestBody ApikeyCreateOp op) {
31         ApikeyInfo cur = EndpointContext.getApikey();
32         Assert.isTrue(StringUtils.isEmpty(cur.getParentCode()), "当前AK无创建子AK权限");
33         Assert.notNull(op.getMonthQuota(), "配额应不可为null");
34         Assert.notNull(op.getSafetyLevel(), "安全等级不可为空");
35         Assert.isTrue(StringUtils.isNotEmpty(op.getRoleCode()) || CollectionUtils.isNotEmpty(op.getPaths()), "权限不可为空");
36         op.setParentCode(cur.getCode());
37         return as.createByParentCode(op);
38     }
39 
40     @GetMapping("/whoami")
41     public ApikeyInfo whoami() {
42         return EndpointContext.getApikey();
43     }
44 
45     @GetMapping("/permission/check")
46     public Boolean permissionCheck(@RequestParam String url) {
47         return EndpointContext.getApikey().hasPermission(url);
48     }
49 }
50
```




```
File: api/server/src/main/java/com/ke/bella/openapi/service/ApikeyService.java
1 package com.ke.bella.openapi.service;
2 
3 import com.alicp.jetcache.CacheManager;
4 import com.alicp.jetcache.anno.CachePenetrationProtect;
5 import com.alicp.jetcache.anno.CacheType;
6 import com.alicp.jetcache.anno.CacheUpdate;
7 import com.alicp.jetcache.anno.Cached;
8 import com.alicp.jetcache.template.QuickConfig;
9 import com.google.common.collect.Sets;
10 import com.ke.bella.openapi.BellaContext;
11 import com.ke.bella.openapi.EndpointContext;
12 import com.ke.bella.openapi.Operator;
13 import com.ke.bella.openapi.PermissionCondition;
14 import com.ke.bella.openapi.apikey.ApikeyCreateOp;
15 import com.ke.bella.openapi.apikey.ApikeyInfo;
16 import com.ke.bella.openapi.apikey.ApikeyOps;
17 import com.ke.bella.openapi.common.exception.ChannelException;
18 import com.ke.bella.openapi.db.repo.ApikeyCostRepo;
19 import com.ke.bella.openapi.db.repo.ApikeyRepo;
20 import com.ke.bella.openapi.db.repo.ApikeyRoleRepo;
21 import com.ke.bella.openapi.db.repo.Page;
22 import com.ke.bella.openapi.safety.ISafetyAuditService;
23 import com.ke.bella.openapi.tables.pojos.ApikeyDB;
24 import com.ke.bella.openapi.tables.pojos.ApikeyMonthCostDB;
25 import com.ke.bella.openapi.tables.pojos.ApikeyRoleDB;
26 import com.ke.bella.openapi.utils.EncryptUtils;
27 import com.ke.bella.openapi.utils.JacksonUtils;
28 import com.ke.bella.openapi.utils.MatchUtils;
29 import org.apache.commons.collections4.CollectionUtils;
30 import org.apache.commons.lang3.StringUtils;
31 import org.springframework.beans.factory.annotation.Autowired;
32 import org.springframework.beans.factory.annotation.Value;
33 import org.springframework.context.ApplicationContext;
34 import org.springframework.stereotype.Component;
35 import org.springframework.transaction.annotation.Transactional;
36 import org.springframework.util.Assert;
37 
38 import javax.annotation.PostConstruct;
39 import java.math.BigDecimal;
40 import java.time.Duration;
41 import java.util.HashSet;
42 import java.util.List;
43 import java.util.Set;
44 import java.util.UUID;
45 
46 import static com.ke.bella.openapi.common.EntityConstants.ACTIVE;
47 import static com.ke.bella.openapi.common.EntityConstants.CONSOLE;
48 import static com.ke.bella.openapi.common.EntityConstants.INACTIVE;
49 import static com.ke.bella.openapi.common.EntityConstants.ORG;
50 import static com.ke.bella.openapi.common.EntityConstants.PERSON;
51 import static com.ke.bella.openapi.common.EntityConstants.SYSTEM;
52 
53 @Component
54 public class ApikeyService {
55     @Autowired
56     private ApikeyRepo apikeyRepo;
57 
58     @Autowired
59     private ApikeyRoleRepo apikeyRoleRepo;
60 
61     @Autowired
62     private ApikeyCostRepo apikeyCostRepo;
63 
64     @Value("${apikey.basic.monthQuota:200}")
65     private int basicMonthQuota;
66 
67     @Value("${apikey.basic.roleCode:low}")
68     private String basicRoleCode;
69 
70     @Value("${apikey.basic.safetyLevel:40}")
71     private byte basicSafetyLevel;
72 
73     @Value("#{'${apikey.basic.childRoleCodes:low,high}'.split (',')}")
74     private List<String> childRoleCodes;
75     @Value("${cache.use:true}")
76     private boolean useCache;
77     @Autowired
78     private CacheManager cacheManager;
79     @Autowired
80     private ApplicationContext applicationContext;
81     @Autowired
82     private ISafetyAuditService safetyAuditService;
83     private static final String apikeyCacheKey = "apikey:sha:";
84 
85     @PostConstruct
86     public void postConstruct() {
87         QuickConfig quickConfig = QuickConfig.newBuilder(apikeyCacheKey)
88                 .cacheNullValue(true)
89                 .cacheType(CacheType.LOCAL)
90                 .expire(Duration.ofSeconds(30))
91                 .localExpire(Duration.ofSeconds(30))
92                 .localLimit(500)
93                 .penetrationProtect(true)
94                 .penetrationProtectTimeout(Duration.ofSeconds(10))
95                 .build();
96         cacheManager.getOrCreateCache(quickConfig);
97     }
98 
99     @Transactional
100     public String apply(ApikeyOps.ApplyOp op) {
101         String ak = UUID.randomUUID().toString();
102         String sha = EncryptUtils.sha256(ak);
103         String display = EncryptUtils.desensitize(ak);
104         if(StringUtils.isNotEmpty(op.getRoleCode())) {
105             Assert.isTrue(childRoleCodes.contains(op.getRoleCode()), "role code不可使用");
106         }
107         ApikeyDB db = new ApikeyDB();
108         db.setAkSha(sha);
109         db.setAkDisplay(display);
110         db.setOwnerType(op.getOwnerType());
111         db.setOwnerCode(op.getOwnerCode());
112         db.setOwnerName(op.getOwnerName());
113         db.setRoleCode(StringUtils.isEmpty(op.getRoleCode()) ? basicRoleCode : op.getRoleCode());
114         db.setSafetyLevel(basicSafetyLevel);
115         db.setMonthQuota(op.getMonthQuota() == null ? BigDecimal.valueOf(basicMonthQuota) : op.getMonthQuota());
116         db.setName(op.getName());
117         db.setRemark(op.getRemark());
118         apikeyRepo.insert(db);
119         return ak;
120     }
121 
122     @Transactional
123     public String createByParentCode(ApikeyCreateOp op) {
124         ApikeyInfo apikey = EndpointContext.getApikey();
125         if(!apikey.getCode().equals(op.getParentCode())) {
126             throw new ChannelException.AuthorizationException("没有操作权限");
127         }
128         if(StringUtils.isNotEmpty(op.getRoleCode())) {
129             apikeyRoleRepo.checkExist(op.getRoleCode(), true);
130         }
131         Assert.isTrue(op.getMonthQuota() == null || op.getMonthQuota().doubleValue() <= apikey.getMonthQuota().doubleValue(), "配额超出ak的最大配额");
132         Assert.isTrue(op.getSafetyLevel() <= apikey.getSafetyLevel(), "安全等级超出ak的最高等级");
133         String ak = UUID.randomUUID().toString();
134         String sha = EncryptUtils.sha256(ak);
135         String display = EncryptUtils.desensitize(ak);
136         ApikeyDB db = new ApikeyDB();
137         db.setAkSha(sha);
138         db.setAkDisplay(display);
139         db.setParentCode(op.getParentCode());
140         db.setOutEntityCode(op.getOutEntityCode());
141         db.setOwnerType(apikey.getOwnerType());
142         db.setOwnerCode(apikey.getOwnerCode());
143         db.setOwnerName(apikey.getOwnerName());
144         db.setRoleCode(op.getRoleCode());
145         db.setMonthQuota(op.getMonthQuota());
146         db.setSafetyLevel(op.getSafetyLevel());
147         db.setName(op.getName());
148         db.setRemark(op.getRemark());
149         db = apikeyRepo.insert(db);
150         if(CollectionUtils.isNotEmpty(op.getPaths())) {
151            boolean match = op.getPaths().stream().allMatch(url -> apikey.getRolePath().getIncluded().stream().anyMatch(pattern -> MatchUtils.matchUrl(pattern, url))
152                     && apikey.getRolePath().getExcluded().stream().noneMatch(pattern -> MatchUtils.matchUrl(pattern, url)));
153             Assert.isTrue(match, "超出ak的权限范围");
154             updateRole(ApikeyOps.RoleOp.builder().code(db.getCode()).paths(op.getPaths()).build());
155         }
156         return ak;
157     }
158 
159     @Transactional
160     public String reset(ApikeyOps.CodeOp op) {
161         apikeyRepo.checkExist(op.getCode(), true);
162         checkPermission(op.getCode());
163         String ak = UUID.randomUUID().toString();
164         String sha = EncryptUtils.sha256(ak);
165         String display = EncryptUtils.desensitize(ak);
166         ApikeyDB db = new ApikeyDB();
167         db.setAkSha(sha);
168         db.setAkDisplay(display);
169         apikeyRepo.update(db, op.getCode());
170         return ak;
171     }
172 
173     @Transactional
174     public void rename(ApikeyOps.NameOp op) {
175         apikeyRepo.update(op, op.getCode());
176     }
177 
178     @Transactional
179     public void bindService(ApikeyOps.ServiceOp op) {
180         apikeyRepo.update(op, op.getCode());
181     }
182 
183     @Transactional
184     public void updateRole(ApikeyOps.RoleOp op) {
185         apikeyRepo.checkExist(op.getCode(), true);
186         checkPermission(op.getCode());
187         if(StringUtils.isNotEmpty(op.getRoleCode())) {
188             apikeyRoleRepo.checkExist(op.getRoleCode(), true);
189         } else {
190             ApikeyRoleDB roleDB = new ApikeyRoleDB();
191             ApikeyInfo.RolePath rolePath = new ApikeyInfo.RolePath();
192             rolePath.setIncluded(op.getPaths());
193             roleDB.setPath(JacksonUtils.serialize(rolePath));
194             roleDB = apikeyRoleRepo.insert(roleDB);
195             op.setRoleCode(roleDB.getRoleCode());
196         }
197         apikeyRepo.update(op, op.getCode());
198     }
199 
200     @Transactional
201     public void certify(ApikeyOps.CertifyOp op) {
202         apikeyRepo.checkExist(op.getCode(), true);
203         checkPermission(op.getCode());
204         Byte level = safetyAuditService.fetchLevelByCertifyCode(op.getCertifyCode());
205         ApikeyDB db = new ApikeyDB();
206         db.setCertifyCode(op.getCertifyCode());
207         db.setSafetyLevel(level);
208         apikeyRepo.update(db, op.getCode());
209     }
210 
211     @Transactional
212     public void updateQuota(ApikeyOps.QuotaOp op) {
213         apikeyRepo.checkExist(op.getCode(), true);
214         checkPermission(op.getCode());
215         apikeyRepo.update(op, op.getCode());
216     }
217 
218     @Transactional
219     public void changeStatus(ApikeyOps.CodeOp op, boolean active) {
220         apikeyRepo.checkExist(op.getCode(), true);
221         checkPermission(op.getCode());
222         String status = active ? ACTIVE : INACTIVE;
223         apikeyRepo.updateStatus(op.getCode(), status);
224     }
225 
226     public ApikeyInfo verifyAuth(String auth) {
227         String ak;
228         if(auth.startsWith("Bearer ")) {
229             ak = auth.substring(7);
230         } else {
231             ak = auth;
232         }
233         String sha = EncryptUtils.sha256(ak);
234         ApikeyInfo info = queryBySha(sha, true);
235         if(info == null) {
236             String display = EncryptUtils.desensitizeByLength(auth);
237             String displayAk = EncryptUtils.desensitize(ak);
238             throw new ChannelException.AuthorizationException("api key不存在，请求的header为：" + display + ", apikey为：" + displayAk);
239         }
240         if(StringUtils.isNotEmpty(info.getParentCode())) {
241             ApikeyInfo parent = queryByCode(info.getParentCode(), true);
242             if(parent == null) {
243                 String display = EncryptUtils.desensitizeByLength(auth);
244                 String displayAk = EncryptUtils.desensitize(ak);
245                 throw new ChannelException.AuthorizationException("api key不存在，请求的header为：" + display + ", apikey为：" + displayAk);
246             }
247             info.setParentInfo(parent);
248         }
249         info.setApikey(ak);
250         return info;
251     }
252 
253     public ApikeyInfo queryBySha(String sha, boolean onlyActive) {
254         ApikeyInfo apikeyInfo;
255         if(useCache && onlyActive) {
256             apikeyInfo = applicationContext.getBean(ApikeyService.class).queryWithCache(sha);
257         } else {
258             apikeyInfo = apikeyRepo.queryBySha(sha);
259         }
260         if(apikeyInfo != null) {
261             if(apikeyInfo.getOwnerType().equals(PERSON)) {
262                 apikeyInfo.setUserId(Long.parseLong(apikeyInfo.getOwnerCode()));
263             } else {
264                 apikeyInfo.setUserId(0L);
265             }
266         }
267         return apikeyInfo;
268     }
269 
270     public ApikeyInfo queryByCode(String code, boolean onlyActive) {
271         ApikeyInfo apikeyInfo = apikeyRepo.queryByCode(code);
272         if(apikeyInfo == null ||(onlyActive && apikeyInfo.getStatus().equals(INACTIVE))) {
273             return null;
274         }
275         return apikeyInfo;
276     }
277 
278     @Transactional
279     @CacheUpdate(name = "apikey:cost:month:", key = "#akCode + ':' + #month", value = "#result")
280     public BigDecimal recordCost(String akCode, String month, BigDecimal cost) {
281         BigDecimal amount = apikeyCostRepo.queryCost(akCode, month);
282         if(amount == null) {
283             apikeyCostRepo.insert(akCode, month);
284         }
285         apikeyCostRepo.increment(akCode, month, cost);
286         return apikeyCostRepo.queryCost(akCode, month);
287     }
288 
289     @Cached(name = "apikey:cost:month:", key = "#akCode + ':' + #month", expire = 31 * 24 * 3600,
290             condition = "T(com.ke.bella.openapi.utils.DateTimeUtils).isCurrentMonth(#month)")
291     @CachePenetrationProtect(timeout = 5)
292     public BigDecimal loadCost(String akCode, String month) {
293         BigDecimal amount = apikeyCostRepo.queryCost(akCode, month);
294         return amount == null ? BigDecimal.ZERO : amount;
295     }
296 
297     public List<ApikeyMonthCostDB> queryBillingsByAkCode(String akCode) {
298         return apikeyCostRepo.queryByAkCode(akCode);
299     }
300 
301     private void checkPermission(String code) {
302         ApikeyDB db = apikeyRepo.queryByUniqueKey(code);
303         ApikeyInfo apikeyInfo = EndpointContext.getApikeyIgnoreNull();
304         if(apikeyInfo == null) {
305             Operator op = BellaContext.getOperator();
306             Assert.isTrue((db.getOwnerType().equals(PERSON) || db.getOwnerType().equals(CONSOLE)) && db.getOwnerCode().equals(op.getUserId().toString()),
307                     "没有操作权限");
308             return;
309         }
310         if(apikeyInfo.getOwnerType().equals(SYSTEM)) {
311             return;
312         }
313         //todo: 获取所有 org
314         Set<String> orgCodes = new HashSet<>();
315         if(db.getOwnerType().equals(SYSTEM)) {
316             throw new ChannelException.AuthorizationException("没有操作权限");
317         }
318         if(db.getOwnerType().equals(ORG)) {
319             validateOrgPermission(apikeyInfo, Sets.newHashSet(db.getOwnerCode()), orgCodes);
320         } else {
321             validateUserPermission(apikeyInfo, db.getOwnerCode());
322         }
323     }
324 
325     public Page<ApikeyDB> pageApikey(ApikeyOps.ApikeyCondition condition) {
326         fillPermissionCode(condition, false);
327         return apikeyRepo.pageAccessKeys(condition);
328     }
329 
330     public void fillPermissionCode(PermissionCondition condition, boolean apikeyFirst) {
331         ApikeyInfo apikeyInfo = EndpointContext.getApikeyIgnoreNull();
332         Operator op = BellaContext.getOperatorIgnoreNull();
333         if(apikeyInfo == null || (!apikeyFirst && op != null)) {
334             if (op == null || CollectionUtils.isNotEmpty(condition.getOrgCodes())) {
335                 throw new ChannelException.AuthorizationException("没有操作权限");
336             }
337             if (StringUtils.isNotEmpty(condition.getPersonalCode())) {
338                 Assert.isTrue(op.getUserId().toString().equals(condition.getPersonalCode()), "没有操作权限");
339             } else {
340                 condition.setPersonalCode(op.getUserId().toString());
341             }
342             return;
343         }
344         // TODO: 获取所有组织代码并填充到 orgCodes
345         Set<String> orgCodes = new HashSet<>();
346 
347         if (StringUtils.isEmpty(condition.getPersonalCode())) {
348             if(apikeyInfo.getOwnerType().equals(PERSON)) {
349                 condition.setPersonalCode(apikeyInfo.getOwnerCode());
350             }
351         } else {
352             validateUserPermission(apikeyInfo, condition.getPersonalCode());
353         }
354 
355         if (CollectionUtils.isEmpty(condition.getOrgCodes())) {
356             condition.setOrgCodes(orgCodes);
357         } else {
358             validateOrgPermission(apikeyInfo, condition.getOrgCodes(), orgCodes);
359         }
360     }
361 
362     private void validateUserPermission(ApikeyInfo apikeyInfo, String personalCode) {
363         if(apikeyInfo.getOwnerType().equals(SYSTEM) || ((apikeyInfo.getOwnerType().equals(PERSON) || apikeyInfo.getOwnerType().equals(CONSOLE)) && personalCode.equals(apikeyInfo.getOwnerCode()))) {
364             return;
365         }
366         throw new ChannelException.AuthorizationException("没有操作权限");
367     }
368 
369     private void validateOrgPermission(ApikeyInfo apikeyInfo, Set<String> conditionOrgCodes, Set<String> orgCodes) {
370         if(apikeyInfo.getOwnerType().equals(SYSTEM) || CollectionUtils.isEmpty(conditionOrgCodes) || orgCodes.containsAll(conditionOrgCodes)) {
371             return;
372         }
373         throw new ChannelException.AuthorizationException("没有操作权限");
374     }
375 
376     @Cached(name = apikeyCacheKey, key = "#sha")
377     public ApikeyInfo queryWithCache(String sha) {
378         ApikeyInfo apikeyInfo = apikeyRepo.queryBySha(sha);
379         if(apikeyInfo == null || (apikeyInfo.getStatus().equals(INACTIVE))) {
380             return null;
381         }
382         return apikeyInfo;
383     }
384 }
385
```




# 历史执行信息

【round_1】
requirement: 
在apikey管理页面中支持查看当月的余额
agent_response: 
I'll implement the functionality to display the current month's balance for API keys on the API key management page. This will involve creating both backend and frontend components to fetch, calculate, and display this information.

Let's start by analyzing what we need to implement:

1. Backend: Add an endpoint to fetch the current month's API key cost and remaining balance
2. Frontend: Update the API key management page to display this information

Let's begin with the implementation:

```diff
--- api/server/src/main/java/com/ke/bella/openapi/console/ApikeyConsoleController.java
+++ api/server/src/main/java/com/ke/bella/openapi/console/ApikeyConsoleController.java
@@ -12,6 +12,7 @@ import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.util.Assert;
+import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
@@ -20,6 +21,10 @@ import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
 import java.util.List;
+import java.util.Map;
+import java.util.HashMap;
+import java.math.BigDecimal;
+import com.ke.bella.openapi.utils.DateTimeUtils;
 
 @BellaAPI
 @RestController
@@ -103,6 +108,19 @@ public class ApikeyConsoleController {
         return apikeyService.queryBillingsByAkCode(akCode);
     }
 
+    @GetMapping("/balance/{akCode}")
+    public Map<String, Object> getApiKeyBalance(@PathVariable String akCode) {
+        String currentMonth = DateTimeUtils.getCurrentMonth();
+        BigDecimal monthCost = apikeyService.loadCost(akCode, currentMonth);
+        ApikeyInfo apiKeyInfo = apikeyService.queryByCode(akCode, true);
+        Map<String, Object> result = new HashMap<>();
+        result.put("akCode", akCode);
+        result.put("month", currentMonth);
+        result.put("cost", monthCost);
+        result.put("quota", apiKeyInfo != null ? apiKeyInfo.getMonthQuota() : BigDecimal.ZERO);
+        result.put("balance", apiKeyInfo != null ? apiKeyInfo.getMonthQuota().subtract(monthCost) : BigDecimal.ZERO);
+        return result;
+    }
+
     @GetMapping("/fetchByCode")
     public ApikeyInfo fetchByCode(@RequestParam("code") String code, @RequestParam(value = "onlyActive", required = false) boolean onlyActive) {
         return apikeyService.queryByCode(code, onlyActive);
```

Now, let's create a new file for the API type and function to retrieve the balance:

```diff
--- /dev/null
+++ web/src/lib/types/apikey-balance.ts
@@ -0,0 +1,8 @@
+export interface ApiKeyBalance {
+  akCode: string;
+  month: string;
+  cost: number;
+  quota: number;
+  balance: number;
+}
+
```

Let's update the API functions to add the new endpoint:

```diff
--- web/src/lib/api/apikey.ts
+++ web/src/lib/api/apikey.ts
@@ -1,5 +1,6 @@
 import { ApikeyInfo, Page} from "@/lib/types/openapi";
 import { openapi } from '@/lib/api/openapi';
+import { ApiKeyBalance } from "@/lib/types/apikey-balance";
 
 export async function getApikeyInfos(page: number, ownerCode: number | null, search: string | null): Promise<Page<ApikeyInfo> | null> {
     try {
@@ -43,3 +44,12 @@ export async function rename(code: string, name: string): Promise<boolean> {
     const response = await openapi.post<boolean>('/console/apikey/rename', { code, name });
     return response.data ?? false;
 }
+
+export async function getApiKeyBalance(code: string): Promise<ApiKeyBalance | null> {
+    try {
+        const response = await openapi.get<ApiKeyBalance>(`/console/apikey/balance/${code}`);
+        return response.data;
+    } catch (error) {
+        console.error('Error fetching apikey balance:', error);
+        return null;
+    }
+}
```

Now, let's create a component to display the API key balance:

```diff
--- /dev/null
+++ web/src/components/apikey/apikey-balance.tsx
@@ -0,0 +1,70 @@
+import React, { useState, useEffect } from 'react';
+import { getApiKeyBalance } from '@/lib/api/apikey';
+import { ApiKeyBalance } from '@/lib/types/apikey-balance';
+import {
+  Dialog,
+  DialogContent,
+  DialogDescription,
+  DialogHeader,
+  DialogTitle,
+} from "@/components/ui/dialog";
+import { Button } from '@/components/ui/button';
+import { CircleDollarSign, AlertCircle } from 'lucide-react';
+
+interface ApiKeyBalanceDialogProps {
+  code: string;
+  isOpen: boolean;
+  onClose: () => void;
+}
+
+export const ApiKeyBalanceDialog: React.FC<ApiKeyBalanceDialogProps> = ({ 
+  code, 
+  isOpen, 
+  onClose 
+}) => {
+  const [balance, setBalance] = useState<ApiKeyBalance | null>(null);
+  const [loading, setLoading] = useState<boolean>(false);
+  const [error, setError] = useState<string | null>(null);
+
+  useEffect(() => {
+    if (isOpen && code) {
+      setLoading(true);
+      setError(null);
+      getApiKeyBalance(code)
+        .then((data) => {
+          if (data) {
+            setBalance(data);
+          } else {
+            setError('无法获取余额信息');
+          }
+        })
+        .catch(err => {
+          console.error('Failed to fetch balance:', err);
+          setError('获取余额信息时发生错误');
+        })
+        .finally(() => {
+          setLoading(false);
+        });
+    }
+  }, [isOpen, code]);
+
+  return (
+    <Dialog open={isOpen} onOpenChange={onClose}>
+      <DialogContent className="sm:max-w-md">
+        <DialogHeader>
+          <DialogTitle>API Key 余额详情</DialogTitle>
+          <DialogDescription>当前月份的使用情况和剩余额度</DialogDescription>
+        </DialogHeader>
+        <div className="py-4">
+          {loading ? (
+            <div className="flex justify-center items-center p-8">
+              <div className="animate-spin rounded-full h-8 w-8 border-4 border-blue-500 border-t-transparent"></div>
+            </div>
+          ) : error ? (
+            <div className="flex items-center justify-center text-red-500 p-4"><AlertCircle className="h-5 w-5 mr-2" />{error}</div>
+          ) : balance && (
+            <div className="space-y-4 p-4 bg-gray-50 rounded-lg border border-gray-200">
+              <div className="grid grid-cols-2 gap-4 text-sm">
+                <div className="font-medium text-gray-500">月份</div>
+                <div>{balance.month}</div>
+                <div className="font-medium text-gray-500">总额度</div>
+                <div>{new Intl.NumberFormat("zh-CN", { style: "currency", currency: "CNY" }).format(balance.quota)}</div>
+                <div className="font-medium text-gray-500">已使用</div>
+                <div>{new Intl.NumberFormat("zh-CN", { style: "currency", currency: "CNY" }).format(balance.cost)}</div>
+                <div className="font-medium text-gray-500">剩余额度</div>
+                <div className={`font-semibold ${balance.balance < balance.quota * 0.2 ? 'text-red-600' : 'text-green-600'}`}>
+                  {new Intl.NumberFormat("zh-CN", { style: "currency", currency: "CNY" }).format(balance.balance)}
+                </div>
+              </div>
+              <div className={`text-sm mt-4 p-2 rounded ${balance.balance < balance.quota * 0.2 ? 'bg-red-50 text-red-800' : 'bg-green-50 text-green-800'}`}>
+                {balance.balance < balance.quota * 0.2 ? (
+                  <p className="flex items-center"><AlertCircle className="h-4 w-4 mr-2" />余额不足，请考虑增加额度</p>
+                ) : (
+                  <p>余额充足</p>
+                )}
+              </div>
+            </div>
+          )}
+        </div>
+        <div className="flex justify-end">
+          <Button onClick={onClose}>关闭</Button>
+        </div>
+      </DialogContent>
+    </Dialog>
+  );
+};
```

Now, let's update the API key columns to add a button for viewing the balance:

```diff
--- web/src/components/apikey/apikey-coloumn.tsx
+++ web/src/components/apikey/apikey-coloumn.tsx
@@ -11,6 +11,7 @@ import {Button} from "@/components/ui/button"
 import {Copy} from 'lucide-react'
 import {useToast} from "@/hooks/use-toast";
 import {safety_apply_url} from "@/config";
+import { ApiKeyBalanceDialog } from "./apikey-balance";
 
 interface EditableCellProps {
     content: ReactNode;
@@ -63,14 +64,17 @@ const RemarkCell = ({ value }: { value: string }) => {
     )
 }
 
-const ActionCell = ({code, refresh, showApikey}: { code: string, refresh: () => void, showApikey: (apikey : string) => void }) => {
+const ActionCell = ({code, refresh, showApikey}: { code: string, refresh: () => void, showApikey: (apikey: string) => void }) => {
     const { toast } = useToast();
+    const [showBalance, setShowBalance] = useState(false);
+    
     const copyToClipboard = () => {
         navigator.clipboard.writeText(code).then(() => {
             toast({ title: "复制成功", description: "API Key编码复制成功。" })
         });
     };
 
+    
     return (
         <div className="flex flex-wrap justify-end gap-2">
             <Button onClick={copyToClipboard} variant="ghost" size="icon" className="p-0 focus:ring-0">
@@ -90,6 +94,29 @@ const ActionCell = ({code, refresh, showApikey}: { code: string, refresh: () => 
             </Button>
             <DeleteDialog code={code} refresh={refresh}/>
             <ResetDialog code={code} showApikey={showApikey}/>
+            <Button 
+                onClick={() => setShowBalance(true)} 
+                variant="ghost" 
+                size="icon" 
+                className="p-0 focus:ring-0"
+            >
+                <TooltipProvider>
+                    <Tooltip>
+                        <TooltipTrigger asChild>
+                            <div>
+                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-wallet">
+                                    <path d="M21 12V7H5a2 2 0 0 1 0-4h14v4" />
+                                    <path d="M3 5v14a2 2 0 0 0 2 2h16v-5" />
+                                    <path d="M18 12a2 2 0 0 0 0 4h4v-4Z" />
+                                </svg>
+                                <span className="sr-only">查看余额</span>
+                            </div>
+                        </TooltipTrigger>
+                        <TooltipContent>查看余额</TooltipContent>
+                    </Tooltip>
+                </TooltipProvider>
+            </Button>
+            <ApiKeyBalanceDialog code={code} isOpen={showBalance} onClose={() => setShowBalance(false)} />
         </div>
     )
 }
```

Let's also add a balance indicator in the main API key page to show the balance status at a glance:

```diff
--- web/src/components/apikey/apikey-coloumn.tsx
+++ web/src/components/apikey/apikey-coloumn.tsx
@@ -11,7 +11,7 @@ import {Button} from "@/components/ui/button"
 import {Copy, Wallet} from 'lucide-react'
 import {useToast} from "@/hooks/use-toast";
 import {safety_apply_url} from "@/config";
-import { ApiKeyBalanceDialog } from "./apikey-balance";
+import {ApiKeyBalanceDialog, ApiKeyBalanceIndicator} from "./apikey-balance";
 
 interface EditableCellProps {
     content: ReactNode;
@@ -206,6 +206,12 @@ export const ApikeyColumns = (refresh: () => void, showApikey: (apikey : string)
             );
         }
     },
+    {
+        accessorKey: "code",
+        header: "余额状态",
+        cell: ({row}) => 
+            <ApiKeyBalanceIndicator code={row.original.code} />
+    },
     {
         accessorKey: "remark",
         header: "备注",
```

Now let's update our balance component to add the indicator:

```diff
--- web/src/components/apikey/apikey-balance.tsx
+++ web/src/components/apikey/apikey-balance.tsx
@@ -9,7 +9,7 @@ import {
   DialogTitle,
 } from "@/components/ui/dialog";
 import { Button } from '@/components/ui/button';
-import { CircleDollarSign, AlertCircle } from 'lucide-react';
+import { CircleDollarSign, AlertCircle, CheckCircle2 } from 'lucide-react';
 
 interface ApiKeyBalanceDialogProps {
   code: string;
@@ -17,6 +17,56 @@ interface ApiKeyBalanceDialogProps {
   onClose: () => void;
 }
 
+interface ApiKeyBalanceIndicatorProps {
+  code: string;
+}
+
+export const ApiKeyBalanceIndicator: React.FC<ApiKeyBalanceIndicatorProps> = ({ code }) => {
+  const [balance, setBalance] = useState<ApiKeyBalance | null>(null);
+  const [loading, setLoading] = useState<boolean>(true);
+  const [error, setError] = useState<boolean>(false);
+
+  useEffect(() => {
+    if (code) {
+      setLoading(true);
+      setError(false);
+      getApiKeyBalance(code)
+        .then((data) => {
+          if (data) {
+            setBalance(data);
+          } else {
+            setError(true);
+          }
+        })
+        .catch(() => {
+          setError(true);
+        })
+        .finally(() => {
+          setLoading(false);
+        });
+    }
+  }, [code]);
+
+  if (loading) {
+    return <div className="flex justify-center"><div className="h-5 w-5 animate-pulse bg-gray-200 rounded-full"></div></div>;
+  }
+
+  if (error || !balance) {
+    return <Badge variant="outline" className="bg-gray-100 text-gray-500">未知</Badge>;
+  }
+
+  const usagePercentage = (balance.cost / balance.quota) * 100;
+  
+  if (usagePercentage >= 80) {
+    return (
+      <Badge className="bg-red-100 text-red-800 flex items-center gap-1">
+        <AlertCircle className="h-3 w-3" /> 余额紧张 ({Math.round(usagePercentage)}%)
+      </Badge>
+    );
+  }
+  
+  return <Badge className="bg-green-100 text-green-800 flex items-center gap-1"><CheckCircle2 className="h-3 w-3" /> 余额充足</Badge>;
+};
+
 export const ApiKeyBalanceDialog: React.FC<ApiKeyBalanceDialogProps> = ({ 
   code, 
   isOpen, 
```

Let's make sure the Badge component is imported:

```diff
--- web/src/components/apikey/apikey-balance.tsx
+++ web/src/components/apikey/apikey-balance.tsx
@@ -9,6 +9,7 @@ import {
   DialogTitle,
 } from "@/components/ui/dialog";
 import { Button } from '@/components/ui/button';
+import { Badge } from '@/components/ui/badge';
 import { CircleDollarSign, AlertCircle, CheckCircle2 } from 'lucide-react';
 
 interface ApiKeyBalanceDialogProps {
```

Let's update the import in the apikey-column.tsx file to use the Wallet icon:

```diff
--- web/src/components/apikey/apikey-coloumn.tsx
+++ web/src/components/apikey/apikey-coloumn.tsx
@@ -8,7 +8,7 @@ import {CertifyDialog, DeleteDialog, QuotaDialog, RenameDialog, ResetDialog} fro
 import {HoverContext} from "@/components/ui/data-table";
 import {Badge} from "@/components/ui/badge"
 import {Button} from "@/components/ui/button"
-import {Copy} from 'lucide-react'
+import {Copy, Wallet} from 'lucide-react'
 import {useToast} from "@/hooks/use-toast";
 import {safety_apply_url} from "@/config";
 import {ApiKeyBalanceDialog, ApiKeyBalanceIndicator} from "./apikey-balance";
@@ -104,15 +104,7 @@ const ActionCell = ({code, refresh, showApikey}: { code: string, refresh: () =>
                     <Tooltip>
                         <TooltipTrigger asChild>
                             <div>
-                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-wallet">
-                                    <path d="M21 12V7H5a2 2 0 0 1 0-4h14v4" />
-                                    <path d="M3 5v14a2 2 0 0 0 2 2h16v-5" />
-                                    <path d="M18 12a2 2 0 0 0 0 4h4v-4Z" />
-                                </svg>
-                                <span className="sr-only">查看余额</span>
-                            </div>
-                        </TooltipTrigger>
-                        <TooltipContent>查看余额</TooltipContent>
+                                <Wallet className="h-4 w-4" />
+                                <span className="sr-only">查看余额</span>
+                            </div>
+                        </TooltipTrigger>
+                        <TooltipContent>查看余额</TooltipContent>
                     </Tooltip>
                 </TooltipProvider>
             </Button>
```

Finally, let's add a summary component at the top of the API key page to show total balance information:

```diff
--- web/src/app/apikey/page.tsx
+++ web/src/app/apikey/page.tsx
@@ -2,7 +2,7 @@
 
 import React, { useEffect, useState } from "react"
 import { DataTable } from "@/components/ui/data-table"
-import { getApikeyInfos, applyApikey } from "@/lib/api/apikey"
+import { getApikeyInfos, applyApikey, getApiKeyBalance } from "@/lib/api/apikey"
 import { ApikeyColumns } from "@/components/apikey/apikey-coloumn"
 import { ApikeyInfo } from "@/lib/types/openapi"
 import { ClientHeader } from "@/components/user/client-header"
@@ -20,6 +20,7 @@ import {
     DialogHeader,
     DialogTitle,
 } from "@/components/ui/dialog"
+import { ApiKeyBalanceSummary } from "@/components/apikey/apikey-balance"
 
 const ApikeyPage: React.FC = () => {
     const [page, setPage] = useState<number>(1)
@@ -140,6 +141,12 @@ const ApikeyPage: React.FC = () => {
             <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8">
                 <div className="p-6">
                     <div className="mb-4 flex justify-between items-center">
+                        <div className="flex-1">
+                            {data && data.length > 0 && (
+                                <ApiKeyBalanceSummary apikeys={data} />
+                            )}
+                        </div>
+                        <div className="flex gap-4">
                         <form onSubmit={handleSearchSubmit} className="relative">
                             <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                             <Input
@@ -154,6 +161,7 @@ const ApikeyPage: React.FC = () => {
                             <Plus className="h-4 w-4 mr-2" />
                             创建 API Key
                         </Button>
+                        </div>
                     </div>
 
                     {isLoading ? (
```

Let's add the ApiKeyBalanceSummary component to apikey-balance.tsx:

```diff
--- web/src/components/apikey/apikey-balance.tsx
+++ web/src/components/apikey/apikey-balance.tsx
@@ -1,6 +1,7 @@
 import React, { useState, useEffect } from 'react';
 import { getApiKeyBalance } from '@/lib/api/apikey';
 import { ApiKeyBalance } from '@/lib/types/apikey-balance';
+import { ApikeyInfo } from '@/lib/types/openapi';
 import {
   Dialog,
   DialogContent,
@@ -10,7 +11,7 @@ import {
 } from "@/components/ui/dialog";
 import { Button } from '@/components/ui/button';
 import { Badge } from '@/components/ui/badge';
-import { CircleDollarSign, AlertCircle, CheckCircle2 } from 'lucide-react';
+import { CircleDollarSign, AlertCircle, CheckCircle2, Wallet } from 'lucide-react';
 
 interface ApiKeyBalanceDialogProps {
   code: string;
@@ -67,6 +68,70 @@ export const ApiKeyBalanceIndicator: React.FC<ApiKeyBalanceIndicatorProps> = ({
   return <Badge className="bg-green-100 text-green-800 flex items-center gap-1"><CheckCircle2 className="h-3 w-3" /> 余额充足</Badge>;
 };
 
+interface ApiKeyBalanceSummaryProps {
+  apikeys: ApikeyInfo[];
+}
+
+export const ApiKeyBalanceSummary: React.FC<ApiKeyBalanceSummaryProps> = ({ apikeys }) => {
+  const [balances, setBalances] = useState<ApiKeyBalance[]>([]);
+  const [loading, setLoading] = useState<boolean>(true);
+
+  useEffect(() => {
+    if (apikeys && apikeys.length > 0) {
+      setLoading(true);
+      Promise.all(
+        apikeys.map(apikey => getApiKeyBalance(apikey.code))
+      ).then(results => {
+        setBalances(results.filter(result => result !== null) as ApiKeyBalance[]);
+      }).finally(() => {
+        setLoading(false);
+      });
+    }
+  }, [apikeys]);
+
+  if (loading) {
+    return <div className="h-10 animate-pulse bg-gray-100 rounded-md w-full"></div>;
+  }
+
+  if (balances.length === 0) {
+    return null;
+  }
+
+  const totalQuota = balances.reduce((sum, balance) => sum + balance.quota, 0);
+  const totalUsed = balances.reduce((sum, balance) => sum



# 用户需求

ApiKeyBalanceSummary
这个页面组件没有实现完成