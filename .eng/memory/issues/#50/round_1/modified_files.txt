[
  {
    "file_name": "api/server/src/main/java/com/ke/bella/openapi/console/ApikeyConsoleController.java",
    "content": "diff\n--- api/server/src/main/java/com/ke/bella/openapi/console/ApikeyConsoleController.java\n+++ api/server/src/main/java/com/ke/bella/openapi/console/ApikeyConsoleController.java\n@@ -12,6 +12,7 @@ import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.util.Assert;\n+import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n@@ -20,6 +21,10 @@ import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n \n import java.util.List;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.math.BigDecimal;\n+import com.ke.bella.openapi.utils.DateTimeUtils;\n \n @BellaAPI\n @RestController\n@@ -103,6 +108,19 @@ public class ApikeyConsoleController {\n         return apikeyService.queryBillingsByAkCode(akCode);\n     }\n \n+    @GetMapping(\"/balance/{akCode}\")\n+    public Map<String, Object> getApiKeyBalance(@PathVariable String akCode) {\n+        String currentMonth = DateTimeUtils.getCurrentMonth();\n+        BigDecimal monthCost = apikeyService.loadCost(akCode, currentMonth);\n+        ApikeyInfo apiKeyInfo = apikeyService.queryByCode(akCode, true);\n+        Map<String, Object> result = new HashMap<>();\n+        result.put(\"akCode\", akCode);\n+        result.put(\"month\", currentMonth);\n+        result.put(\"cost\", monthCost);\n+        result.put(\"quota\", apiKeyInfo != null ? apiKeyInfo.getMonthQuota() : BigDecimal.ZERO);\n+        result.put(\"balance\", apiKeyInfo != null ? apiKeyInfo.getMonthQuota().subtract(monthCost) : BigDecimal.ZERO);\n+        return result;\n+    }\n+\n     @GetMapping(\"/fetchByCode\")\n     public ApikeyInfo fetchByCode(@RequestParam(\"code\") String code, @RequestParam(value = \"onlyActive\", required = false) boolean onlyActive) {\n         return apikeyService.queryByCode(code, onlyActive);\n\n",
    "file_content": "package com.ke.bella.openapi.console;\n\nimport com.ke.bella.openapi.annotations.BellaAPI;\nimport com.ke.bella.openapi.apikey.ApikeyInfo;\nimport com.ke.bella.openapi.apikey.ApikeyOps;\nimport com.ke.bella.openapi.db.repo.Page;\nimport com.ke.bella.openapi.service.ApikeyService;\nimport com.ke.bella.openapi.tables.pojos.ApikeyDB;\nimport com.ke.bella.openapi.tables.pojos.ApikeyMonthCostDB;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.util.Assert;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@BellaAPI\n@RestController\n@RequestMapping(\"/console/apikey\")\n@Tag(name = \"API Key管理\")\npublic class ApikeyConsoleController {\n    @Autowired\n    private ApikeyService apikeyService;\n    @PostMapping(\"/apply\")\n    public String apply(@RequestBody ApikeyOps.ApplyOp op) {\n        Assert.isTrue(op.getMonthQuota() == null || op.getMonthQuota().doubleValue() > 0, \"配额应大于0\");\n        return apikeyService.apply(op);\n    }\n\n    @PostMapping(\"/reset\")\n    public String reset(@RequestBody ApikeyOps.CodeOp op) {\n        Assert.hasText(op.getCode(), \"code不可为空\");\n        return apikeyService.reset(op);\n    }\n\n    @PostMapping(\"/rename\")\n    public Boolean rename(@RequestBody ApikeyOps.NameOp op) {\n        Assert.hasText(op.getCode(), \"code不可为空\");\n        Assert.notNull(op.getName(), \"name不可为null\");\n        apikeyService.rename(op);\n        return true;\n    }\n\n    @PostMapping(\"/bindService\")\n    public Boolean bindService(@RequestBody ApikeyOps.ServiceOp op) {\n        Assert.hasText(op.getCode(), \"code不可为空\");\n        Assert.notNull(op.getServiceId(), \"name不可为null\");\n        apikeyService.bindService(op);\n        return true;\n    }\n\n    @PostMapping(\"/role/update\")\n    public Boolean updateRole(@RequestBody ApikeyOps.RoleOp op) {\n        Assert.hasText(op.getCode(), \"code不可为空\");\n        Assert.isTrue(StringUtils.isNotEmpty(op.getRoleCode())\n                        || CollectionUtils.isNotEmpty(op.getPaths()), \"权限不可为空\");\n        apikeyService.updateRole(op);\n        return true;\n    }\n\n    @PostMapping(\"/quota/update\")\n    public Boolean updateQuota(@RequestBody ApikeyOps.QuotaOp op) {\n        Assert.hasText(op.getCode(), \"code不可为空\");\n        Assert.notNull(op.getMonthQuota(), \"配额不可为空\");\n        Assert.isTrue(op.getMonthQuota().doubleValue() > 0, \"配额应大于0\");\n        apikeyService.updateQuota(op);\n        return true;\n    }\n\n    @PostMapping(\"/certify\")\n    public Boolean certify(@RequestBody ApikeyOps.CertifyOp op) {\n        Assert.hasText(op.getCode(), \"code不可为空\");\n        Assert.notNull(op.getCertifyCode(), \"认证码不可为空\");\n        apikeyService.certify(op);\n        return true;\n    }\n\n    @PostMapping(\"/activate\")\n    public Boolean activate(@RequestBody ApikeyOps.CodeOp op) {\n        Assert.hasText(op.getCode(), \"code不可为空\");\n        apikeyService.changeStatus(op, true);\n        return true;\n    }\n\n    @PostMapping(\"/inactivate\")\n    public Boolean inactivate(@RequestBody ApikeyOps.CodeOp op) {\n        Assert.hasText(op.getCode(), \"code不可为空\");\n        apikeyService.changeStatus(op, false);\n        return true;\n    }\n\n\n    @GetMapping(\"/cost/{akCode}\")\n    public List<ApikeyMonthCostDB> listApiKeyBillings(@PathVariable String akCode) {\n        return apikeyService.queryBillingsByAkCode(akCode);\n    }\n\n    @GetMapping(\"/fetchByCode\")\n    public ApikeyInfo fetchByCode(@RequestParam(\"code\") String code, @RequestParam(value = \"onlyActive\", required = false) boolean onlyActive) {\n        return apikeyService.queryByCode(code, onlyActive);\n    }\n\n    @GetMapping(\"/fetchBySha\")\n    public ApikeyInfo fetchBySha(@RequestParam(\"sha\") String sha, @RequestParam(value = \"onlyActive\", required = false) boolean onlyActive) {\n        return apikeyService.queryBySha(sha, onlyActive);\n    }\n\n    @GetMapping(\"/page\")\n    public Page<ApikeyDB> pageApikey(ApikeyOps.ApikeyCondition condition) {\n        return apikeyService.pageApikey(condition);\n    }\n}\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "web/src/lib/types/apikey-balance.ts",
    "content": "diff\n--- /dev/null\n+++ web/src/lib/types/apikey-balance.ts\n@@ -0,0 +1,8 @@\n+export interface ApiKeyBalance {\n+  akCode: string;\n+  month: string;\n+  cost: number;\n+  quota: number;\n+  balance: number;\n+}\n+\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "web/src/lib/api/apikey.ts",
    "content": "diff\n--- web/src/lib/api/apikey.ts\n+++ web/src/lib/api/apikey.ts\n@@ -1,5 +1,6 @@\n import { ApikeyInfo, Page} from \"@/lib/types/openapi\";\n import { openapi } from '@/lib/api/openapi';\n+import { ApiKeyBalance } from \"@/lib/types/apikey-balance\";\n \n export async function getApikeyInfos(page: number, ownerCode: number | null, search: string | null): Promise<Page<ApikeyInfo> | null> {\n     try {\n@@ -43,3 +44,12 @@ export async function rename(code: string, name: string): Promise<boolean> {\n     const response = await openapi.post<boolean>('/console/apikey/rename', { code, name });\n     return response.data ?? false;\n }\n+\n+export async function getApiKeyBalance(code: string): Promise<ApiKeyBalance | null> {\n+    try {\n+        const response = await openapi.get<ApiKeyBalance>(`/console/apikey/balance/${code}`);\n+        return response.data;\n+    } catch (error) {\n+        console.error('Error fetching apikey balance:', error);\n+        return null;\n+    }\n+}\n\n",
    "file_content": "import { ApikeyInfo, Page} from \"@/lib/types/openapi\";\nimport { openapi } from '@/lib/api/openapi';\n\nexport async function getApikeyInfos(page: number, ownerCode: number | null, search: string | null): Promise<Page<ApikeyInfo> | null> {\n    try {\n        const response = await openapi.get<Page<ApikeyInfo>>(`/console/apikey/page`, {\n            params: { status: 'active', ownerType:'person', ownerCode: ownerCode, searchParam: search, page }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching api:', error);\n        throw error;\n    }\n}\n\nexport async function applyApikey(ownerCode: string, ownerName: string): Promise<string> {\n    const response = await openapi.post<string>(`/console/apikey/apply`,\n        {ownerType:'person', ownerCode: ownerCode, ownerName: ownerName, monthQuota: 50});\n    return response.data;\n}\n\nexport async function deleteApikey(code: string): Promise<boolean> {\n    const response = await openapi.post<boolean>(`/console/apikey/inactivate`, { code });\n    return response.data ?? false;\n}\n\nexport async function resetApikey(code: string): Promise<string | null> {\n    const response = await openapi.post<string>(`/console/apikey/reset`, { code });\n    return response.data || null;\n}\n\nexport async function updateCertify(code: string, certifyCode: string): Promise<boolean> {\n    const response = await openapi.post<boolean>('/console/apikey/certify', { code, certifyCode });\n    return response.data ?? false;\n}\n\nexport async function updateQuota(code: string, monthQuota: number): Promise<boolean> {\n    const response = await openapi.post<boolean>('/console/apikey/quota/update', { code, monthQuota });\n    return response.data ?? false;\n}\n\nexport async function rename(code: string, name: string): Promise<boolean> {\n    const response = await openapi.post<boolean>('/console/apikey/rename', { code, name });\n    return response.data ?? false;\n}\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "web/src/components/apikey/apikey-balance.tsx",
    "content": "diff\n--- /dev/null\n+++ web/src/components/apikey/apikey-balance.tsx\n@@ -0,0 +1,70 @@\n+import React, { useState, useEffect } from 'react';\n+import { getApiKeyBalance } from '@/lib/api/apikey';\n+import { ApiKeyBalance } from '@/lib/types/apikey-balance';\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogDescription,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import { Button } from '@/components/ui/button';\n+import { CircleDollarSign, AlertCircle } from 'lucide-react';\n+\n+interface ApiKeyBalanceDialogProps {\n+  code: string;\n+  isOpen: boolean;\n+  onClose: () => void;\n+}\n+\n+export const ApiKeyBalanceDialog: React.FC<ApiKeyBalanceDialogProps> = ({ \n+  code, \n+  isOpen, \n+  onClose \n+}) => {\n+  const [balance, setBalance] = useState<ApiKeyBalance | null>(null);\n+  const [loading, setLoading] = useState<boolean>(false);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  useEffect(() => {\n+    if (isOpen && code) {\n+      setLoading(true);\n+      setError(null);\n+      getApiKeyBalance(code)\n+        .then((data) => {\n+          if (data) {\n+            setBalance(data);\n+          } else {\n+            setError('无法获取余额信息');\n+          }\n+        })\n+        .catch(err => {\n+          console.error('Failed to fetch balance:', err);\n+          setError('获取余额信息时发生错误');\n+        })\n+        .finally(() => {\n+          setLoading(false);\n+        });\n+    }\n+  }, [isOpen, code]);\n+\n+  return (\n+    <Dialog open={isOpen} onOpenChange={onClose}>\n+      <DialogContent className=\"sm:max-w-md\">\n+        <DialogHeader>\n+          <DialogTitle>API Key 余额详情</DialogTitle>\n+          <DialogDescription>当前月份的使用情况和剩余额度</DialogDescription>\n+        </DialogHeader>\n+        <div className=\"py-4\">\n+          {loading ? (\n+            <div className=\"flex justify-center items-center p-8\">\n+              <div className=\"animate-spin rounded-full h-8 w-8 border-4 border-blue-500 border-t-transparent\"></div>\n+            </div>\n+          ) : error ? (\n+            <div className=\"flex items-center justify-center text-red-500 p-4\"><AlertCircle className=\"h-5 w-5 mr-2\" />{error}</div>\n+          ) : balance && (\n+            <div className=\"space-y-4 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n+              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n+                <div className=\"font-medium text-gray-500\">月份</div>\n+                <div>{balance.month}</div>\n+                <div className=\"font-medium text-gray-500\">总额度</div>\n+                <div>{new Intl.NumberFormat(\"zh-CN\", { style: \"currency\", currency: \"CNY\" }).format(balance.quota)}</div>\n+                <div className=\"font-medium text-gray-500\">已使用</div>\n+                <div>{new Intl.NumberFormat(\"zh-CN\", { style: \"currency\", currency: \"CNY\" }).format(balance.cost)}</div>\n+                <div className=\"font-medium text-gray-500\">剩余额度</div>\n+                <div className={`font-semibold ${balance.balance < balance.quota * 0.2 ? 'text-red-600' : 'text-green-600'}`}>\n+                  {new Intl.NumberFormat(\"zh-CN\", { style: \"currency\", currency: \"CNY\" }).format(balance.balance)}\n+                </div>\n+              </div>\n+              <div className={`text-sm mt-4 p-2 rounded ${balance.balance < balance.quota * 0.2 ? 'bg-red-50 text-red-800' : 'bg-green-50 text-green-800'}`}>\n+                {balance.balance < balance.quota * 0.2 ? (\n+                  <p className=\"flex items-center\"><AlertCircle className=\"h-4 w-4 mr-2\" />余额不足，请考虑增加额度</p>\n+                ) : (\n+                  <p>余额充足</p>\n+                )}\n+              </div>\n+            </div>\n+          )}\n+        </div>\n+        <div className=\"flex justify-end\">\n+          <Button onClick={onClose}>关闭</Button>\n+        </div>\n+      </DialogContent>\n+    </Dialog>\n+  );\n+};\n\n\ndiff\n--- web/src/components/apikey/apikey-balance.tsx\n+++ web/src/components/apikey/apikey-balance.tsx\n@@ -9,7 +9,7 @@ import {\n   DialogTitle,\n } from \"@/components/ui/dialog\";\n import { Button } from '@/components/ui/button';\n-import { CircleDollarSign, AlertCircle } from 'lucide-react';\n+import { CircleDollarSign, AlertCircle, CheckCircle2 } from 'lucide-react';\n \n interface ApiKeyBalanceDialogProps {\n   code: string;\n@@ -17,6 +17,56 @@ interface ApiKeyBalanceDialogProps {\n   onClose: () => void;\n }\n \n+interface ApiKeyBalanceIndicatorProps {\n+  code: string;\n+}\n+\n+export const ApiKeyBalanceIndicator: React.FC<ApiKeyBalanceIndicatorProps> = ({ code }) => {\n+  const [balance, setBalance] = useState<ApiKeyBalance | null>(null);\n+  const [loading, setLoading] = useState<boolean>(true);\n+  const [error, setError] = useState<boolean>(false);\n+\n+  useEffect(() => {\n+    if (code) {\n+      setLoading(true);\n+      setError(false);\n+      getApiKeyBalance(code)\n+        .then((data) => {\n+          if (data) {\n+            setBalance(data);\n+          } else {\n+            setError(true);\n+          }\n+        })\n+        .catch(() => {\n+          setError(true);\n+        })\n+        .finally(() => {\n+          setLoading(false);\n+        });\n+    }\n+  }, [code]);\n+\n+  if (loading) {\n+    return <div className=\"flex justify-center\"><div className=\"h-5 w-5 animate-pulse bg-gray-200 rounded-full\"></div></div>;\n+  }\n+\n+  if (error || !balance) {\n+    return <Badge variant=\"outline\" className=\"bg-gray-100 text-gray-500\">未知</Badge>;\n+  }\n+\n+  const usagePercentage = (balance.cost / balance.quota) * 100;\n+  \n+  if (usagePercentage >= 80) {\n+    return (\n+      <Badge className=\"bg-red-100 text-red-800 flex items-center gap-1\">\n+        <AlertCircle className=\"h-3 w-3\" /> 余额紧张 ({Math.round(usagePercentage)}%)\n+      </Badge>\n+    );\n+  }\n+  \n+  return <Badge className=\"bg-green-100 text-green-800 flex items-center gap-1\"><CheckCircle2 className=\"h-3 w-3\" /> 余额充足</Badge>;\n+};\n+\n export const ApiKeyBalanceDialog: React.FC<ApiKeyBalanceDialogProps> = ({ \n   code, \n   isOpen, \n\n\ndiff\n--- web/src/components/apikey/apikey-balance.tsx\n+++ web/src/components/apikey/apikey-balance.tsx\n@@ -9,6 +9,7 @@ import {\n   DialogTitle,\n } from \"@/components/ui/dialog\";\n import { Button } from '@/components/ui/button';\n+import { Badge } from '@/components/ui/badge';\n import { CircleDollarSign, AlertCircle, CheckCircle2 } from 'lucide-react';\n \n interface ApiKeyBalanceDialogProps {\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "web/src/components/apikey/apikey-coloumn.tsx",
    "content": "Diff #1:\ndiff\n--- web/src/components/apikey/apikey-coloumn.tsx\n+++ web/src/components/apikey/apikey-coloumn.tsx\n@@ -11,6 +11,7 @@ import {Button} from \"@/components/ui/button\"\n import {Copy} from 'lucide-react'\n import {useToast} from \"@/hooks/use-toast\";\n import {safety_apply_url} from \"@/config\";\n+import { ApiKeyBalanceDialog } from \"./apikey-balance\";\n \n interface EditableCellProps {\n     content: ReactNode;\n@@ -63,14 +64,17 @@ const RemarkCell = ({ value }: { value: string }) => {\n     )\n }\n \n-const ActionCell = ({code, refresh, showApikey}: { code: string, refresh: () => void, showApikey: (apikey : string) => void }) => {\n+const ActionCell = ({code, refresh, showApikey}: { code: string, refresh: () => void, showApikey: (apikey: string) => void }) => {\n     const { toast } = useToast();\n+    const [showBalance, setShowBalance] = useState(false);\n+    \n     const copyToClipboard = () => {\n         navigator.clipboard.writeText(code).then(() => {\n             toast({ title: \"复制成功\", description: \"API Key编码复制成功。\" })\n         });\n     };\n \n+    \n     return (\n         <div className=\"flex flex-wrap justify-end gap-2\">\n             <Button onClick={copyToClipboard} variant=\"ghost\" size=\"icon\" className=\"p-0 focus:ring-0\">\n@@ -90,6 +94,29 @@ const ActionCell = ({code, refresh, showApikey}: { code: string, refresh: () => \n             </Button>\n             <DeleteDialog code={code} refresh={refresh}/>\n             <ResetDialog code={code} showApikey={showApikey}/>\n+            <Button \n+                onClick={() => setShowBalance(true)} \n+                variant=\"ghost\" \n+                size=\"icon\" \n+                className=\"p-0 focus:ring-0\"\n+            >\n+                <TooltipProvider>\n+                    <Tooltip>\n+                        <TooltipTrigger asChild>\n+                            <div>\n+                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-wallet\">\n+                                    <path d=\"M21 12V7H5a2 2 0 0 1 0-4h14v4\" />\n+                                    <path d=\"M3 5v14a2 2 0 0 0 2 2h16v-5\" />\n+                                    <path d=\"M18 12a2 2 0 0 0 0 4h4v-4Z\" />\n+                                </svg>\n+                                <span className=\"sr-only\">查看余额</span>\n+                            </div>\n+                        </TooltipTrigger>\n+                        <TooltipContent>查看余额</TooltipContent>\n+                    </Tooltip>\n+                </TooltipProvider>\n+            </Button>\n+            <ApiKeyBalanceDialog code={code} isOpen={showBalance} onClose={() => setShowBalance(false)} />\n         </div>\n     )\n }\n\n\n\nDiff #2:\ndiff\n--- web/src/components/apikey/apikey-coloumn.tsx\n+++ web/src/components/apikey/apikey-coloumn.tsx\n@@ -11,7 +11,7 @@ import {Button} from \"@/components/ui/button\"\n import {Copy, Wallet} from 'lucide-react'\n import {useToast} from \"@/hooks/use-toast\";\n import {safety_apply_url} from \"@/config\";\n-import { ApiKeyBalanceDialog } from \"./apikey-balance\";\n+import {ApiKeyBalanceDialog, ApiKeyBalanceIndicator} from \"./apikey-balance\";\n \n interface EditableCellProps {\n     content: ReactNode;\n@@ -206,6 +206,12 @@ export const ApikeyColumns = (refresh: () => void, showApikey: (apikey : string)\n             );\n         }\n     },\n+    {\n+        accessorKey: \"code\",\n+        header: \"余额状态\",\n+        cell: ({row}) => \n+            <ApiKeyBalanceIndicator code={row.original.code} />\n+    },\n     {\n         accessorKey: \"remark\",\n         header: \"备注\",\n\n\n\nDiff #3:\ndiff\n--- web/src/components/apikey/apikey-coloumn.tsx\n+++ web/src/components/apikey/apikey-coloumn.tsx\n@@ -8,7 +8,7 @@ import {CertifyDialog, DeleteDialog, QuotaDialog, RenameDialog, ResetDialog} fro\n import {HoverContext} from \"@/components/ui/data-table\";\n import {Badge} from \"@/components/ui/badge\"\n import {Button} from \"@/components/ui/button\"\n-import {Copy} from 'lucide-react'\n+import {Copy, Wallet} from 'lucide-react'\n import {useToast} from \"@/hooks/use-toast\";\n import {safety_apply_url} from \"@/config\";\n import {ApiKeyBalanceDialog, ApiKeyBalanceIndicator} from \"./apikey-balance\";\n@@ -104,15 +104,7 @@ const ActionCell = ({code, refresh, showApikey}: { code: string, refresh: () =>\n                     <Tooltip>\n                         <TooltipTrigger asChild>\n                             <div>\n-                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-wallet\">\n-                                    <path d=\"M21 12V7H5a2 2 0 0 1 0-4h14v4\" />\n-                                    <path d=\"M3 5v14a2 2 0 0 0 2 2h16v-5\" />\n-                                    <path d=\"M18 12a2 2 0 0 0 0 4h4v-4Z\" />\n-                                </svg>\n-                                <span className=\"sr-only\">查看余额</span>\n-                            </div>\n-                        </TooltipTrigger>\n-                        <TooltipContent>查看余额</TooltipContent>\n+                                <Wallet className=\"h-4 w-4\" />\n+                                <span className=\"sr-only\">查看余额</span>\n+                            </div>\n+                        </TooltipTrigger>\n+                        <TooltipContent>查看余额</TooltipContent>\n                     </Tooltip>\n                 </TooltipProvider>\n             </Button>\n\n",
    "file_content": "'use client'\n\nimport React, {ReactNode, useEffect, useRef, useState} from \"react\"\nimport {ColumnDef} from \"@tanstack/react-table\"\nimport {ApikeyInfo} from \"@/lib/types/openapi\"\nimport {Tooltip, TooltipContent, TooltipProvider, TooltipTrigger} from \"@/components/ui/tooltip\"\nimport {CertifyDialog, DeleteDialog, QuotaDialog, RenameDialog, ResetDialog} from \"./apikey-dialog\"\nimport {HoverContext} from \"@/components/ui/data-table\";\nimport {Badge} from \"@/components/ui/badge\"\nimport {Button} from \"@/components/ui/button\"\nimport {Copy} from 'lucide-react'\nimport {useToast} from \"@/hooks/use-toast\";\nimport {safety_apply_url} from \"@/config\";\n\ninterface EditableCellProps {\n    content: ReactNode;\n    dialogComponent: (isOpen: boolean, onClose: () => void) => React.ReactElement;\n    positionCalc: string;\n    rowId: string;\n}\n\nconst EditableCell: React.FC<EditableCellProps> = ({ content, dialogComponent, positionCalc, rowId }) => {\n    const hoveredRowId = React.useContext(HoverContext);\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\n    const contentRef = useRef<HTMLSpanElement>(null);\n    const [iconPosition, setIconPosition] = useState(0);\n\n    useEffect(() => {\n        if (contentRef.current) {\n            const contentWidth = contentRef.current.offsetWidth;\n            setIconPosition(contentWidth / 2 + 5);\n        }\n    }, [content]);\n\n    const showButton = hoveredRowId === rowId || isDialogOpen;\n\n    return (\n        <div className=\"relative flex justify-center items-center w-full\">\n            <span ref={contentRef} className=\"font-medium\">{content}</span>\n            {showButton && (\n                <div style={{ position: 'absolute', left: `calc(${positionCalc} + ${iconPosition}px)` }}>\n                    {dialogComponent(isDialogOpen, () => setIsDialogOpen(!isDialogOpen))}\n                </div>\n            )}\n        </div>\n    );\n};\n\n\nconst RemarkCell = ({ value }: { value: string }) => {\n    const remark = value || '/'\n    return (\n        <TooltipProvider>\n            <Tooltip>\n                <TooltipTrigger asChild>\n                    <div className=\"truncate max-w-xs cursor-help\">{remark}</div>\n                </TooltipTrigger>\n                <TooltipContent side=\"bottom\" className=\"w-64 break-words\">\n                    <p>{remark}</p>\n                </TooltipContent>\n            </Tooltip>\n        </TooltipProvider>\n    )\n}\n\nconst ActionCell = ({code, refresh, showApikey}: { code: string, refresh: () => void, showApikey: (apikey : string) => void }) => {\n    const { toast } = useToast();\n    const copyToClipboard = () => {\n        navigator.clipboard.writeText(code).then(() => {\n            toast({ title: \"复制成功\", description: \"API Key编码复制成功。\" })\n        });\n    };\n\n    return (\n        <div className=\"flex flex-wrap justify-end gap-2\">\n            <Button onClick={copyToClipboard} variant=\"ghost\" size=\"icon\" className=\"p-0 focus:ring-0\">\n                <TooltipProvider>\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <div>\n                                <Copy className=\"h-4 w-4\" />\n                                <span className=\"sr-only\">复制ak code</span>\n                            </div>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>复制ak code</p>\n                        </TooltipContent>\n                    </Tooltip>\n                </TooltipProvider>\n            </Button>\n            <DeleteDialog code={code} refresh={refresh}/>\n            <ResetDialog code={code} showApikey={showApikey}/>\n        </div>\n    )\n}\n\nfunction getSafetyLevel(level: number) : string {\n    switch (level) {\n        case 10:\n            return \"极低\";\n        case 20:\n            return \"低\";\n        case 30:\n            return \"中\";\n        case 40:\n            return \"高\";\n        default:\n            return \"N/A\";\n    }\n}\n\nexport const ApikeyColumns = (refresh: () => void, showApikey: (apikey : string) => void): ColumnDef<ApikeyInfo>[] => [\n    {\n        accessorKey: \"akDisplay\",\n        header: \"AK\",\n        cell: ({row}) =>\n            (<div className=\"font-mono text-sm\">\n                {row.original.akDisplay}\n            </div>)\n        ,\n    },\n    {\n        accessorKey: \"name\",\n        header: \"名称\",\n        cell: ({row}) => (\n            <EditableCell\n                content={row.original.name}\n                dialogComponent={(isOpen, onClose) => (\n                    <RenameDialog\n                        code={row.original.code}\n                        origin={row.original.name}\n                        refresh={refresh}\n                        isOpen={isOpen}\n                        onClose={onClose}\n                    />\n                )}\n                positionCalc=\"50%\"\n                rowId={row.id}\n            />\n        ),\n    },\n    {\n        accessorKey: \"serviceId\",\n        header:\n            \"服务名\",\n        cell:\n            ({row}) => <div>{row.getValue(\"serviceId\")}</div>,\n    },\n    {\n        accessorKey: \"safetyLevel\",\n        header: \"安全等级\",\n        cell: ({row}) => {\n            const level = row.original.safetyLevel as number;\n            let color = \"bg-green-100 text-green-800\";\n            if (level == 1) {\n                color = \"bg-yellow-100 text-yellow-800\";\n            }\n            if (level == 0) {\n                color = \"bg-red-100 text-red-800\";\n            }\n\n            return (\n                safety_apply_url ?\n                <EditableCell\n                    content={<Badge className={`${color} capitalize`}>{getSafetyLevel(level)}\n                </Badge>}\n                    dialogComponent={(isOpen, onClose) => (\n                        <CertifyDialog\n                            code={row.original.code}\n                            refresh={refresh}\n                            isOpen={isOpen}\n                            onClose={onClose}\n                        />\n                    )}\n                    positionCalc=\"60%\"\n                    rowId={row.id}\n                /> : <Badge className={`${color} capitalize`}>{getSafetyLevel(level)}\n                    </Badge>\n            );\n        },\n    },\n    {\n        accessorKey: \"monthQuota\",\n        header: \"每月额度\",\n        cell: ({row}) => {\n            const formatted = new Intl.NumberFormat(\"zh-CN\", {\n                style: \"currency\",\n                currency: \"CNY\",\n            }).format(row.original.monthQuota);\n\n            return (\n                <EditableCell\n                    content={formatted}\n                    dialogComponent={(isOpen, onClose) => (\n                        <QuotaDialog\n                            code={row.original.code}\n                            origin={row.original.monthQuota}\n                            refresh={refresh}\n                            isOpen={isOpen}\n                            onClose={onClose}\n                        />\n                    )}\n                    positionCalc=\"50%\"\n                    rowId={row.id}\n                />\n            );\n        }\n    },\n    {\n        accessorKey: \"remark\",\n        header: \"备注\",\n        cell: ({row}) => <RemarkCell value={row.original.remark}/>,\n    },\n    {\n        id: \"actions\",\n        header: \"\",\n        cell: ({row}) => (\n            <ActionCell code={row.original.code} refresh={refresh} showApikey={showApikey}/>\n        ),\n    },\n]\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "web/src/app/apikey/page.tsx",
    "content": "diff\n--- web/src/app/apikey/page.tsx\n+++ web/src/app/apikey/page.tsx\n@@ -2,7 +2,7 @@\n \n import React, { useEffect, useState } from \"react\"\n import { DataTable } from \"@/components/ui/data-table\"\n-import { getApikeyInfos, applyApikey } from \"@/lib/api/apikey\"\n+import { getApikeyInfos, applyApikey, getApiKeyBalance } from \"@/lib/api/apikey\"\n import { ApikeyColumns } from \"@/components/apikey/apikey-coloumn\"\n import { ApikeyInfo } from \"@/lib/types/openapi\"\n import { ClientHeader } from \"@/components/user/client-header\"\n@@ -20,6 +20,7 @@ import {\n     DialogHeader,\n     DialogTitle,\n } from \"@/components/ui/dialog\"\n+import { ApiKeyBalanceSummary } from \"@/components/apikey/apikey-balance\"\n \n const ApikeyPage: React.FC = () => {\n     const [page, setPage] = useState<number>(1)\n@@ -140,6 +141,12 @@ const ApikeyPage: React.FC = () => {\n             <div className=\"container mx-auto py-8 px-4 sm:px-6 lg:px-8\">\n                 <div className=\"p-6\">\n                     <div className=\"mb-4 flex justify-between items-center\">\n+                        <div className=\"flex-1\">\n+                            {data && data.length > 0 && (\n+                                <ApiKeyBalanceSummary apikeys={data} />\n+                            )}\n+                        </div>\n+                        <div className=\"flex gap-4\">\n                         <form onSubmit={handleSearchSubmit} className=\"relative\">\n                             <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                             <Input\n@@ -154,6 +161,7 @@ const ApikeyPage: React.FC = () => {\n                             <Plus className=\"h-4 w-4 mr-2\" />\n                             创建 API Key\n                         </Button>\n+                        </div>\n                     </div>\n \n                     {isLoading ? (\n\n",
    "file_content": "'use client'\n\nimport React, { useEffect, useState } from \"react\"\nimport { DataTable } from \"@/components/ui/data-table\"\nimport { getApikeyInfos, applyApikey } from \"@/lib/api/apikey\"\nimport { ApikeyColumns } from \"@/components/apikey/apikey-coloumn\"\nimport { ApikeyInfo } from \"@/lib/types/openapi\"\nimport { ClientHeader } from \"@/components/user/client-header\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Search, Plus, ChevronLeft, ChevronRight, Copy, Check } from \"lucide-react\"\nimport { useUser } from \"@/lib/context/user-context\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport {ToastAction} from \"@/components/ui/toast\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle,\n} from \"@/components/ui/dialog\"\n\nconst ApikeyPage: React.FC = () => {\n    const [page, setPage] = useState<number>(1)\n    const [data, setData] = useState<ApikeyInfo[] | null>(null)\n    const [totalPages, setTotalPages] = useState<number>(1)\n    const [isLoading, setIsLoading] = useState<boolean>(true)\n    const [searchTerm, setSearchTerm] = useState<string>(\"\")\n    const [newApiKey, setNewApiKey] = useState<string | null>(null)\n    const [showDialog, setShowDialog] = useState<boolean>(false)\n    const [copied, setCopied] = useState<boolean>(false)\n    const { userInfo } = useUser()\n    const { toast } = useToast()\n\n    const refresh = async () => {\n        setIsLoading(true)\n        if (userInfo) {\n            try {\n                const res = await getApikeyInfos(page, userInfo?.userId || null, searchTerm || null)\n                setData(res?.data || null)\n                if (res) {\n                    setTotalPages(Math.ceil(res.total / 10))\n                } else {\n                    setTotalPages(1)\n                }\n            } catch (error) {\n                console.error('Failed to fetch API keys:', error)\n                setData(null)\n            } finally {\n                setIsLoading(false)\n            }\n        }\n    }\n\n    const showApikey = async (apikey : string)  => {\n        await refresh()\n        setNewApiKey(apikey)\n        setShowDialog(true)\n        setCopied(false)\n    }\n\n    useEffect(() => {\n        refresh()\n    }, [page, userInfo])\n\n    const handlePageChange = (newPage: number) => {\n        setPage(newPage)\n    }\n\n    const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchTerm(event.target.value)\n    }\n\n    const handleSearchSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        setPage(1)\n        refresh()\n    }\n\n    const handleCopyApiKey = () => {\n        if (newApiKey) {\n            navigator.clipboard.writeText(newApiKey).then(() => {\n                setCopied(true)\n                setTimeout(() => setCopied(false), 2000)\n                toast({\n                    title: \"已复制\",\n                    description: \"API Key 已复制到剪贴板\",\n                })\n            }).catch(err => {\n                console.error('复制失败:', err)\n                toast({\n                    title: \"复制失败\",\n                    description: \"无法复制到剪贴板，请手动复制\",\n                    variant: \"destructive\",\n                })\n            })\n        }\n    }\n\n    const handleCreateApiKey = async () => {\n        if (!userInfo) {\n            toast({\n                title: \"错误\",\n                description: \"用户未登录，无法创建 API Key\",\n                variant: \"destructive\",\n            })\n            return\n        }\n\n        try {\n            setIsLoading(true)\n            const apikey = await applyApikey(userInfo.userId.toString(), userInfo.userName)\n            if (apikey) {\n                showApikey(apikey)\n            } else {\n                toast({\n                    title: \"错误\",\n                    description: \"创建 API Key 失败\",\n                    variant: \"destructive\",\n                })\n            }\n        } catch (error) {\n            console.error('Failed to create API key:', error)\n            toast({\n                title: \"错误\",\n                description: \"创建 API Key 时发生错误\",\n                variant: \"destructive\",\n            })\n        } finally {\n            setIsLoading(false)\n        }\n    }\n\n    const columns = ApikeyColumns(refresh, showApikey)\n\n    return (\n        <div className=\"min-h-screen bg-gray-50\">\n            <ClientHeader title='API Key 管理'/>\n            <div className=\"container mx-auto py-8 px-4 sm:px-6 lg:px-8\">\n                <div className=\"p-6\">\n                    <div className=\"mb-4 flex justify-between items-center\">\n                        <form onSubmit={handleSearchSubmit} className=\"relative\">\n                            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                            <Input\n                                type=\"text\"\n                                placeholder=\"搜索 API Key 名称\"\n                                value={searchTerm}\n                                onChange={handleSearch}\n                                className=\"pl-10 w-64\"\n                            />\n                        </form>\n                        <Button onClick={handleCreateApiKey} className=\"bg-gray-700 hover:bg-gray-900 text-white\">\n                            <Plus className=\"h-4 w-4 mr-2\" />\n                            创建 API Key\n                        </Button>\n                    </div>\n\n                    {isLoading ? (\n                        <div className=\"flex justify-center items-center h-64\">\n                            <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-blue-500 border-t-transparent\"></div>\n                        </div>\n                    ) : data ? (\n                        <DataTable columns={columns} data={data}/>\n                    ) : (\n                        <p className=\"text-center text-gray-500\">No API keys found.</p>\n                    )}\n                    <div className=\"mt-6 flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                            <Button\n                                onClick={() => handlePageChange(page - 1)}\n                                disabled={page === 1 || isLoading}\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"text-gray-600 hover:bg-gray-50 border-gray-200\"\n                            >\n                                <ChevronLeft className=\"h-4 w-4 mr-2\"/>\n                                上一页\n                            </Button>\n                            <Button\n                                onClick={() => handlePageChange(page + 1)}\n                                disabled={page === totalPages || isLoading}\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"text-gray-600 hover:bg-gray-50 border-gray-200\"\n                            >\n                                下一页\n                                <ChevronRight className=\"h-4 w-4 ml-2\"/>\n                            </Button>\n                        </div>\n                        <span className=\"text-sm text-gray-600\">\n                            第 {page} 页，共 {totalPages} 页\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            {/* API Key 创建成功弹窗 */}\n            <Dialog open={showDialog} onOpenChange={setShowDialog}>\n                <DialogContent className=\"sm:max-w-md bg-white dark:bg-gray-800 border-0\">\n                    <DialogHeader>\n                        <DialogTitle className=\"text-center text-xl font-semibold\">API Key 创建成功</DialogTitle>\n                        <DialogDescription className=\"text-center pt-2\">\n                            <div className=\"space-y-4 mt-2\">\n                                <div className=\"bg-blue-50 dark:bg-blue-900/30 p-3 rounded-md border border-blue-100 dark:border-blue-800\">\n                                    <p className=\"text-sm font-medium text-blue-800 dark:text-blue-300\">\n                                        请保存您的API Key，它只会显示一次。关闭此窗口后将无法再次查看完整的API Key。\n                                    </p>\n                                </div>\n                            </div>\n                        </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"flex flex-col items-center mt-6\">\n                        <div className=\"w-full bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg p-4 shadow-sm\">\n                            <div className=\"bg-white dark:bg-gray-800 p-4 rounded-md font-mono text-sm break-all border border-gray-100 dark:border-gray-700 shadow-inner\">\n                                {newApiKey}\n                            </div>\n                        </div>\n                        <div className=\"flex items-center mt-4 text-amber-600 dark:text-amber-500\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9z\" clipRule=\"evenodd\" />\n                            </svg>\n                            <p className=\"text-sm\">\n                                请妥善保管您的API Key，不要与他人分享。\n                            </p>\n                        </div>\n                        <div className=\"bg-amber-50 dark:bg-amber-900/30 p-3 rounded-md border border-amber-100 dark:border-amber-800\">\n                            <p className=\"text-sm font-medium text-amber-800 dark:text-amber-300\">\n                                此API Key 仅用于openapi的接口请求鉴权。后续申请额度等操作，需要填写的并非此apikey，而是<span className=\"font-bold underline\">ak code</span>（即apikey的id，不是用于身份验证的密钥），获取方式为：点击每一行操作栏中的复制按钮。\n                            </p>\n                        </div>\n                    </div>\n                    <DialogFooter className=\"flex flex-col sm:flex-row gap-3 mt-6\">\n                        <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={handleCopyApiKey}\n                            className=\"w-full relative overflow-hidden group\"\n                        >\n                            <span className={`absolute inset-0 flex items-center justify-center transition-opacity duration-300 ${copied ? 'opacity-100' : 'opacity-0'}`}>\n                                <Check className=\"h-4 w-4 mr-2\" />\n                                已复制\n                            </span>\n                            <span className={`flex items-center justify-center transition-opacity duration-300 ${copied ? 'opacity-0' : 'opacity-100'}`}>\n                                <Copy className=\"h-4 w-4 mr-2\" />\n                                复制API Key\n                            </span>\n                        </Button>\n                        <Button\n                            type=\"button\"\n                            onClick={() => setShowDialog(false)}\n                            className=\"w-full bg-gray-800 hover:bg-gray-900\"\n                        >\n                            确认并关闭\n                        </Button>\n                    </DialogFooter>\n                </DialogContent>\n            </Dialog>\n        </div>\n    )\n}\n\nexport default ApikeyPage\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  }
]