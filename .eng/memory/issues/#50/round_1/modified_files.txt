[
  {
    "file_name": "web/src/components/apikey/apikey-balance.tsx",
    "content": "diff\n--- web/src/components/apikey/apikey-balance.tsx\n+++ web/src/components/apikey/apikey-balance.tsx\n@@ -10,7 +10,7 @@ import {\n   DialogTitle,\n } from \"@/components/ui/dialog\";\n import { Button } from '@/components/ui/button';\n-import { Badge } from '@/components/ui/badge';\n+import { Badge } from '@/components/ui/badge';\n import { CircleDollarSign, AlertCircle, CheckCircle2 } from 'lucide-react';\n \n interface ApiKeyBalanceDialogProps {\n@@ -67,6 +67,76 @@ export const ApiKeyBalanceIndicator: React.FC<ApiKeyBalanceIndicatorProps> = ({\n   \n   return <Badge className=\"bg-green-100 text-green-800 flex items-center gap-1\"><CheckCircle2 className=\"h-3 w-3\" /> 余额充足</Badge>;\n };\n+\n+interface ApiKeyBalanceSummaryProps {\n+  apikeys: ApikeyInfo[];\n+}\n+\n+export const ApiKeyBalanceSummary: React.FC<ApiKeyBalanceSummaryProps> = ({ apikeys }) => {\n+  const [balances, setBalances] = useState<ApiKeyBalance[]>([]);\n+  const [loading, setLoading] = useState<boolean>(true);\n+\n+  useEffect(() => {\n+    if (apikeys && apikeys.length > 0) {\n+      setLoading(true);\n+      Promise.all(\n+        apikeys.map(apikey => getApiKeyBalance(apikey.code))\n+      ).then(results => {\n+        setBalances(results.filter(result => result !== null) as ApiKeyBalance[]);\n+      }).finally(() => {\n+        setLoading(false);\n+      });\n+    }\n+  }, [apikeys]);\n+\n+  if (loading) {\n+    return <div className=\"h-10 animate-pulse bg-gray-100 rounded-md w-full max-w-md\"></div>;\n+  }\n+\n+  if (balances.length === 0) {\n+    return null;\n+  }\n+\n+  const totalQuota = balances.reduce((sum, balance) => sum + balance.quota, 0);\n+  const totalUsed = balances.reduce((sum, balance) => sum + balance.cost, 0);\n+  const totalRemaining = totalQuota - totalUsed;\n+  const usagePercentage = (totalUsed / totalQuota) * 100;\n+  \n+  let statusColor = \"bg-green-100 text-green-800\";\n+  let statusText = \"正常\";\n+  let statusIcon = <CheckCircle2 className=\"h-4 w-4 mr-1\" />;\n+  \n+  if (usagePercentage >= 80) {\n+    statusColor = \"bg-red-100 text-red-800\";\n+    statusText = \"紧张\";\n+    statusIcon = <AlertCircle className=\"h-4 w-4 mr-1\" />;\n+  } else if (usagePercentage >= 60) {\n+    statusColor = \"bg-yellow-100 text-yellow-800\";\n+    statusText = \"注意\";\n+    statusIcon = <AlertCircle className=\"h-4 w-4 mr-1\" />;\n+  }\n+\n+  return (\n+    <div className=\"bg-white rounded-lg shadow p-4 max-w-2xl\">\n+      <div className=\"flex items-center mb-2\">\n+        <CircleDollarSign className=\"h-5 w-5 mr-2 text-gray-700\" />\n+        <h3 className=\"text-lg font-medium\">API Key 余额摘要</h3>\n+      </div>\n+      <div className=\"grid grid-cols-3 gap-4 mt-3\">\n+        <div className=\"text-center\">\n+          <div className=\"text-sm text-gray-500\">总额度</div>\n+          <div className=\"font-semibold text-lg\">{new Intl.NumberFormat(\"zh-CN\", { style: \"currency\", currency: \"CNY\" }).format(totalQuota)}</div>\n+        </div>\n+        <div className=\"text-center\">\n+          <div className=\"text-sm text-gray-500\">已使用</div>\n+          <div className=\"font-semibold text-lg\">{new Intl.NumberFormat(\"zh-CN\", { style: \"currency\", currency: \"CNY\" }).format(totalUsed)}</div>\n+        </div>\n+        <div className=\"text-center\">\n+          <div className=\"text-sm text-gray-500\">剩余额度</div>\n+          <div className={`font-semibold text-lg ${totalRemaining < totalQuota * 0.2 ? 'text-red-600' : 'text-green-600'}`}>\n+            {new Intl.NumberFormat(\"zh-CN\", { style: \"currency\", currency: \"CNY\" }).format(totalRemaining)}\n+          </div>\n+        </div>\n+      </div>\n+      <div className=\"mt-3 flex justify-between items-center\">\n+        <div className=\"bg-gray-100 h-2 rounded-full flex-grow mr-4\">\n+          <div \n+            className={`h-full rounded-full ${usagePercentage >= 80 ? 'bg-red-500' : usagePercentage >= 60 ? 'bg-yellow-500' : 'bg-green-500'}`} \n+            style={{ width: `${Math.min(usagePercentage, 100)}%` }}\n+          ></div>\n+        </div>\n+        <Badge className={`${statusColor} capitalize flex items-center`}>\n+          {statusIcon} 余额{statusText}\n+        </Badge>\n+      </div>\n+    </div>\n+  );\n+};\n \n export const ApiKeyBalanceDialog: React.FC<ApiKeyBalanceDialogProps> = ({ \n   code, \n\n",
    "file_content": "import React, { useState, useEffect } from 'react';\nimport { getApiKeyBalance } from '@/lib/api/apikey';\nimport { ApiKeyBalance } from '@/lib/types/apikey-balance';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { CircleDollarSign, AlertCircle, CheckCircle2 } from 'lucide-react';\n\ninterface ApiKeyBalanceDialogProps {\n  code: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface ApiKeyBalanceIndicatorProps {\n  code: string;\n}\n\nexport const ApiKeyBalanceIndicator: React.FC<ApiKeyBalanceIndicatorProps> = ({ code }) => {\n  const [balance, setBalance] = useState<ApiKeyBalance | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (code) {\n      setLoading(true);\n      setError(false);\n      getApiKeyBalance(code)\n        .then((data) => {\n          if (data) {\n            setBalance(data);\n          } else {\n            setError(true);\n          }\n        })\n        .catch(() => {\n          setError(true);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  }, [code]);\n\n  if (loading) {\n    return <div className=\"flex justify-center\"><div className=\"h-5 w-5 animate-pulse bg-gray-200 rounded-full\"></div></div>;\n  }\n\n  if (error || !balance) {\n    return <Badge variant=\"outline\" className=\"bg-gray-100 text-gray-500\">未知</Badge>;\n  }\n\n  const usagePercentage = (balance.cost / balance.quota) * 100;\n  \n  if (usagePercentage >= 80) {\n    return (\n      <Badge className=\"bg-red-100 text-red-800 flex items-center gap-1\">\n        <AlertCircle className=\"h-3 w-3\" /> 余额紧张 ({Math.round(usagePercentage)}%)\n      </Badge>\n    );\n  }\n  \n  return <Badge className=\"bg-green-100 text-green-800 flex items-center gap-1\"><CheckCircle2 className=\"h-3 w-3\" /> 余额充足</Badge>;\n};\n\nexport const ApiKeyBalanceDialog: React.FC<ApiKeyBalanceDialogProps> = ({ \n  code, \n  isOpen, \n  onClose \n}) => {\n  const [balance, setBalance] = useState<ApiKeyBalance | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (isOpen && code) {\n      setLoading(true);\n      setError(null);\n      getApiKeyBalance(code)\n        .then((data) => {\n          if (data) {\n            setBalance(data);\n          } else {\n            setError('无法获取余额信息');\n          }\n        })\n        .catch(err => {\n          console.error('Failed to fetch balance:', err);\n          setError('获取余额信息时发生错误');\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  }, [isOpen, code]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>API Key 余额详情</DialogTitle>\n          <DialogDescription>当前月份的使用情况和剩余额度</DialogDescription>\n        </DialogHeader>\n        <div className=\"py-4\">\n          {loading ? (\n            <div className=\"flex justify-center items-center p-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-4 border-blue-500 border-t-transparent\"></div>\n            </div>\n          ) : error ? (\n            <div className=\"flex items-center justify-center text-red-500 p-4\"><AlertCircle className=\"h-5 w-5 mr-2\" />{error}</div>\n          ) : balance && (\n            <div className=\"space-y-4 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"font-medium text-gray-500\">月份</div>\n                <div>{balance.month}</div>\n                <div className=\"font-medium text-gray-500\">总额度</div>\n                <div>{new Intl.NumberFormat(\"zh-CN\", { style: \"currency\", currency: \"CNY\" }).format(balance.quota)}</div>\n                <div className=\"font-medium text-gray-500\">已使用</div>\n                <div>{new Intl.NumberFormat(\"zh-CN\", { style: \"currency\", currency: \"CNY\" }).format(balance.cost)}</div>\n                <div className=\"font-medium text-gray-500\">剩余额度</div>\n                <div className={`font-semibold ${balance.balance < balance.quota * 0.2 ? 'text-red-600' : 'text-green-600'}`}>\n                  {new Intl.NumberFormat(\"zh-CN\", { style: \"currency\", currency: \"CNY\" }).format(balance.balance)}\n                </div>\n              </div>\n              <div className={`text-sm mt-4 p-2 rounded ${balance.balance < balance.quota * 0.2 ? 'bg-red-50 text-red-800' : 'bg-green-50 text-green-800'}`}>\n                {balance.balance < balance.quota * 0.2 ? (\n                  <p className=\"flex items-center\"><AlertCircle className=\"h-4 w-4 mr-2\" />余额不足，请考虑增加额度</p>\n                ) : (\n                  <p>余额充足</p>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"flex justify-end\">\n          <Button onClick={onClose}>关闭</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "web/src/components/apikey/apikey-coloumn.tsx",
    "content": "diff\n--- web/src/components/apikey/apikey-coloumn.tsx\n+++ web/src/components/apikey/apikey-coloumn.tsx\n@@ -8,7 +8,7 @@ import {CertifyDialog, DeleteDialog, QuotaDialog, RenameDialog, ResetDialog} fro\n import {HoverContext} from \"@/components/ui/data-table\";\n import {Badge} from \"@/components/ui/badge\"\n import {Button} from \"@/components/ui/button\"\n-import {Copy} from 'lucide-react'\n+import {Copy, Wallet} from 'lucide-react'\n import {useToast} from \"@/hooks/use-toast\";\n import {safety_apply_url} from \"@/config\";\n import {ApiKeyBalanceDialog, ApiKeyBalanceIndicator} from \"./apikey-balance\";\n\n",
    "file_content": "'use client'\n\nimport React, {ReactNode, useEffect, useRef, useState} from \"react\"\nimport {ColumnDef} from \"@tanstack/react-table\"\nimport {ApikeyInfo} from \"@/lib/types/openapi\"\nimport {Tooltip, TooltipContent, TooltipProvider, TooltipTrigger} from \"@/components/ui/tooltip\"\nimport {CertifyDialog, DeleteDialog, QuotaDialog, RenameDialog, ResetDialog} from \"./apikey-dialog\"\nimport {HoverContext} from \"@/components/ui/data-table\";\nimport {Badge} from \"@/components/ui/badge\"\nimport {Button} from \"@/components/ui/button\"\nimport {Copy, Wallet} from 'lucide-react'\nimport {useToast} from \"@/hooks/use-toast\";\nimport {safety_apply_url} from \"@/config\";\nimport {ApiKeyBalanceDialog, ApiKeyBalanceIndicator} from \"./apikey-balance\";\n\ninterface EditableCellProps {\n    content: ReactNode;\n    dialogComponent: (isOpen: boolean, onClose: () => void) => React.ReactElement;\n    positionCalc: string;\n    rowId: string;\n}\n\nconst EditableCell: React.FC<EditableCellProps> = ({ content, dialogComponent, positionCalc, rowId }) => {\n    const hoveredRowId = React.useContext(HoverContext);\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\n    const contentRef = useRef<HTMLSpanElement>(null);\n    const [iconPosition, setIconPosition] = useState(0);\n\n    useEffect(() => {\n        if (contentRef.current) {\n            const contentWidth = contentRef.current.offsetWidth;\n            setIconPosition(contentWidth / 2 + 5);\n        }\n    }, [content]);\n\n    const showButton = hoveredRowId === rowId || isDialogOpen;\n\n    return (\n        <div className=\"relative flex justify-center items-center w-full\">\n            <span ref={contentRef} className=\"font-medium\">{content}</span>\n            {showButton && (\n                <div style={{ position: 'absolute', left: `calc(${positionCalc} + ${iconPosition}px)` }}>\n                    {dialogComponent(isDialogOpen, () => setIsDialogOpen(!isDialogOpen))}\n                </div>\n            )}\n        </div>\n    );\n};\n\n\nconst RemarkCell = ({ value }: { value: string }) => {\n    const remark = value || '/'\n    return (\n        <TooltipProvider>\n            <Tooltip>\n                <TooltipTrigger asChild>\n                    <div className=\"truncate max-w-xs cursor-help\">{remark}</div>\n                </TooltipTrigger>\n                <TooltipContent side=\"bottom\" className=\"w-64 break-words\">\n                    <p>{remark}</p>\n                </TooltipContent>\n            </Tooltip>\n        </TooltipProvider>\n    )\n}\n\nconst ActionCell = ({code, refresh, showApikey}: { code: string, refresh: () => void, showApikey: (apikey: string) => void }) => {\n    const { toast } = useToast();\n    const [showBalance, setShowBalance] = useState(false);\n    \n    const copyToClipboard = () => {\n        navigator.clipboard.writeText(code).then(() => {\n            toast({ title: \"复制成功\", description: \"API Key编码复制成功。\" })\n        });\n    };\n\n    \n    return (\n        <div className=\"flex flex-wrap justify-end gap-2\">\n            <Button onClick={copyToClipboard} variant=\"ghost\" size=\"icon\" className=\"p-0 focus:ring-0\">\n                <TooltipProvider>\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <div>\n                                <Copy className=\"h-4 w-4\" />\n                                <span className=\"sr-only\">复制ak code</span>\n                            </div>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>复制ak code</p>\n                        </TooltipContent>\n                    </Tooltip>\n                </TooltipProvider>\n            </Button>\n            <DeleteDialog code={code} refresh={refresh}/>\n            <ResetDialog code={code} showApikey={showApikey}/>\n            <Button \n                onClick={() => setShowBalance(true)} \n                variant=\"ghost\" \n                size=\"icon\" \n                className=\"p-0 focus:ring-0\"\n            >\n                <TooltipProvider>\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <div>\n                                <Wallet className=\"h-4 w-4\" />\n                                <span className=\"sr-only\">查看余额</span>\n                            </div>\n                        </TooltipTrigger>\n                        <TooltipContent>查看余额</TooltipContent>\n                    </Tooltip>\n                </TooltipProvider>\n            </Button>\n            <ApiKeyBalanceDialog code={code} isOpen={showBalance} onClose={() => setShowBalance(false)} />\n        </div>\n    )\n}\n\nfunction getSafetyLevel(level: number) : string {\n    switch (level) {\n        case 10:\n            return \"极低\";\n        case 20:\n            return \"低\";\n        case 30:\n            return \"中\";\n        case 40:\n            return \"高\";\n        default:\n            return \"N/A\";\n    }\n}\n\nexport const ApikeyColumns = (refresh: () => void, showApikey: (apikey : string) => void): ColumnDef<ApikeyInfo>[] => [\n    {\n        accessorKey: \"akDisplay\",\n        header: \"AK\",\n        cell: ({row}) =>\n            (<div className=\"font-mono text-sm\">\n                {row.original.akDisplay}\n            </div>)\n        ,\n    },\n    {\n        accessorKey: \"name\",\n        header: \"名称\",\n        cell: ({row}) => (\n            <EditableCell\n                content={row.original.name}\n                dialogComponent={(isOpen, onClose) => (\n                    <RenameDialog\n                        code={row.original.code}\n                        origin={row.original.name}\n                        refresh={refresh}\n                        isOpen={isOpen}\n                        onClose={onClose}\n                    />\n                )}\n                positionCalc=\"50%\"\n                rowId={row.id}\n            />\n        ),\n    },\n    {\n        accessorKey: \"serviceId\",\n        header:\n            \"服务名\",\n        cell:\n            ({row}) => <div>{row.getValue(\"serviceId\")}</div>,\n    },\n    {\n        accessorKey: \"safetyLevel\",\n        header: \"安全等级\",\n        cell: ({row}) => {\n            const level = row.original.safetyLevel as number;\n            let color = \"bg-green-100 text-green-800\";\n            if (level == 1) {\n                color = \"bg-yellow-100 text-yellow-800\";\n            }\n            if (level == 0) {\n                color = \"bg-red-100 text-red-800\";\n            }\n\n            return (\n                safety_apply_url ?\n                <EditableCell\n                    content={<Badge className={`${color} capitalize`}>{getSafetyLevel(level)}\n                </Badge>}\n                    dialogComponent={(isOpen, onClose) => (\n                        <CertifyDialog\n                            code={row.original.code}\n                            refresh={refresh}\n                            isOpen={isOpen}\n                            onClose={onClose}\n                        />\n                    )}\n                    positionCalc=\"60%\"\n                    rowId={row.id}\n                /> : <Badge className={`${color} capitalize`}>{getSafetyLevel(level)}\n                    </Badge>\n            );\n        },\n    },\n    {\n        accessorKey: \"monthQuota\",\n        header: \"每月额度\",\n        cell: ({row}) => {\n            const formatted = new Intl.NumberFormat(\"zh-CN\", {\n                style: \"currency\",\n                currency: \"CNY\",\n            }).format(row.original.monthQuota);\n\n            return (\n                <EditableCell\n                    content={formatted}\n                    dialogComponent={(isOpen, onClose) => (\n                        <QuotaDialog\n                            code={row.original.code}\n                            origin={row.original.monthQuota}\n                            refresh={refresh}\n                            isOpen={isOpen}\n                            onClose={onClose}\n                        />\n                    )}\n                    positionCalc=\"50%\"\n                    rowId={row.id}\n                />\n            );\n        }\n    },\n    {\n        accessorKey: \"code\",\n        header: \"余额状态\",\n        cell: ({row}) => \n            <ApiKeyBalanceIndicator code={row.original.code} />\n    },\n    {\n        accessorKey: \"remark\",\n        header: \"备注\",\n        cell: ({row}) => <RemarkCell value={row.original.remark}/>,\n    },\n    {\n        id: \"actions\",\n        header: \"\",\n        cell: ({row}) => (\n            <ActionCell code={row.original.code} refresh={refresh} showApikey={showApikey}/>\n        ),\n    },\n]",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "api/server/src/main/java/com/ke/bella/openapi/console/ApikeyConsoleController.java",
    "content": "diff\n--- /dev/null\n+++ api/server/src/main/java/com/ke/bella/openapi/console/ApikeyConsoleController.java\n@@ -0,0 +1,134 @@\n+package com.ke.bella.openapi.console;\n+\n+import com.ke.bella.openapi.BellaContext;\n+import com.ke.bella.openapi.Operator;\n+import com.ke.bella.openapi.annotations.BellaAPI;\n+import com.ke.bella.openapi.apikey.ApikeyCreateOp;\n+import com.ke.bella.openapi.apikey.ApikeyInfo;\n+import com.ke.bella.openapi.apikey.ApikeyOps;\n+import com.ke.bella.openapi.db.repo.Page;\n+import com.ke.bella.openapi.service.ApikeyService;\n+import com.ke.bella.openapi.tables.pojos.ApikeyDB;\n+import com.ke.bella.openapi.tables.pojos.ApikeyMonthCostDB;\n+import com.ke.bella.openapi.utils.DateTimeUtils;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.util.Assert;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.math.BigDecimal;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@BellaAPI\n+@RestController\n+@RequestMapping(\"/console/apikey\")\n+public class ApikeyConsoleController {\n+\n+    @Autowired\n+    private ApikeyService apikeyService;\n+\n+    @GetMapping(\"/page\")\n+    public Page<ApikeyDB> pageApikey(ApikeyOps.ApikeyCondition condition) {\n+        return apikeyService.pageApikey(condition);\n+    }\n+\n+    @PostMapping(\"/apply\")\n+    public String apply(@RequestBody ApikeyOps.ApplyOp op) {\n+        Operator operator = BellaContext.getOperator();\n+        op.setOwnerName(operator.getUserName());\n+        return apikeyService.apply(op);\n+    }\n+\n+    @PostMapping(\"/create\")\n+    public String create(@RequestBody ApikeyCreateOp op) {\n+        Assert.notNull(op.getMonthQuota(), \"配额应不可为null\");\n+        Assert.notNull(op.getSafetyLevel(), \"安全等级不可为空\");\n+        Assert.isTrue(StringUtils.isNotEmpty(op.getRoleCode()) || CollectionUtils.isNotEmpty(op.getPaths()), \"权限不可为空\");\n+        return apikeyService.createByParentCode(op);\n+    }\n+\n+    @PostMapping(\"/inactivate\")\n+    public boolean inactivate(@RequestBody ApikeyOps.CodeOp op) {\n+        apikeyService.changeStatus(op, false);\n+        return true;\n+    }\n+\n+    @PostMapping(\"/activate\")\n+    public boolean activate(@RequestBody ApikeyOps.CodeOp op) {\n+        apikeyService.changeStatus(op, true);\n+        return true;\n+    }\n+\n+    @PostMapping(\"/reset\")\n+    public String reset(@RequestBody ApikeyOps.CodeOp op) {\n+        return apikeyService.reset(op);\n+    }\n+\n+    @PostMapping(\"/rename\")\n+    public boolean rename(@RequestBody ApikeyOps.NameOp op) {\n+        apikeyService.rename(op);\n+        return true;\n+    }\n+\n+    @PostMapping(\"/service/bind\")\n+    public boolean bindService(@RequestBody ApikeyOps.ServiceOp op) {\n+        apikeyService.bindService(op);\n+        return true;\n+    }\n+\n+    @PostMapping(\"/certify\")\n+    public boolean certify(@RequestBody ApikeyOps.CertifyOp op) {\n+        apikeyService.certify(op);\n+        return true;\n+    }\n+\n+    @PostMapping(\"/quota/update\")\n+    public boolean updateQuota(@RequestBody ApikeyOps.QuotaOp op) {\n+        apikeyService.updateQuota(op);\n+        return true;\n+    }\n+\n+    @PostMapping(\"/role/update\")\n+    public boolean updateRole(@RequestBody ApikeyOps.RoleOp op) {\n+        apikeyService.updateRole(op);\n+        return true;\n+    }\n+\n+    @GetMapping(\"/billings\")\n+    public List<ApikeyMonthCostDB> queryBillings(@RequestParam String akCode) {\n+        return apikeyService.queryBillingsByAkCode(akCode);\n+    }\n+\n+    @GetMapping(\"/balance/{akCode}\")\n+    public Map<String, Object> getApiKeyBalance(@PathVariable String akCode) {\n+        String currentMonth = DateTimeUtils.getCurrentMonth();\n+        BigDecimal monthCost = apikeyService.loadCost(akCode, currentMonth);\n+        ApikeyInfo apiKeyInfo = apikeyService.queryByCode(akCode, true);\n+        Map<String, Object> result = new HashMap<>();\n+        result.put(\"akCode\", akCode);\n+        result.put(\"month\", currentMonth);\n+        result.put(\"cost\", monthCost);\n+        result.put(\"quota\", apiKeyInfo != null ? apiKeyInfo.getMonthQuota() : BigDecimal.ZERO);\n+        result.put(\"balance\", apiKeyInfo != null ? apiKeyInfo.getMonthQuota().subtract(monthCost) : BigDecimal.ZERO);\n+        return result;\n+    }\n+\n+    @GetMapping(\"/fetchByCode\")\n+    public ApikeyInfo fetchByCode(@RequestParam(\"code\") String code, @RequestParam(value = \"onlyActive\", required = false) boolean onlyActive) {\n+        return apikeyService.queryByCode(code, onlyActive);\n+    }\n+}\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "api/server/src/main/java/com/ke/bella/openapi/utils/DateTimeUtils.java",
    "content": "diff\n--- /dev/null\n+++ api/server/src/main/java/com/ke/bella/openapi/utils/DateTimeUtils.java\n@@ -0,0 +1,15 @@\n+package com.ke.bella.openapi.utils;\n+\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+\n+public class DateTimeUtils {\n+    \n+    private static final DateTimeFormatter MONTH_FORMATTER = DateTimeFormatter.ofPattern(\"yyyy-MM\");\n+    \n+    public static String getCurrentMonth() {\n+        LocalDate now = LocalDate.now();\n+        return now.format(MONTH_FORMATTER);\n+    }\n+    \n+}\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "web/requirements.txt",
    "content": "diff\n--- /dev/null\n+++ web/requirements.txt\n@@ -0,0 +1,10 @@\n+next>=13.0.0\n+react>=18.0.0\n+react-dom>=18.0.0\n+typescript>=5.0.0\n+@types/react>=18.0.0\n+@types/node>=18.0.0\n+tailwindcss>=3.3.0\n+postcss>=8.4.0\n+autoprefixer>=10.4.0\n+lucide-react>=0.260.0\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "web/package.json",
    "content": "diff\n--- /dev/null\n+++ web/package.json\n@@ -0,0 +1,46 @@\n+{\n+  \"name\": \"openapi-web\",\n+  \"version\": \"0.1.0\",\n+  \"private\": true,\n+  \"scripts\": {\n+    \"dev\": \"next dev\",\n+    \"build\": \"next build\",\n+    \"start\": \"next start\",\n+    \"lint\": \"next lint\"\n+  },\n+  \"dependencies\": {\n+    \"@radix-ui/react-dialog\": \"^1.0.5\",\n+    \"@radix-ui/react-slot\": \"^1.0.2\",\n+    \"@radix-ui/react-tooltip\": \"^1.0.7\",\n+    \"@tanstack/react-table\": \"^8.10.7\",\n+    \"axios\": \"^1.6.2\",\n+    \"class-variance-authority\": \"^0.7.0\",\n+    \"clsx\": \"^2.0.0\",\n+    \"lucide-react\": \"^0.292.0\",\n+    \"next\": \"14.0.3\",\n+    \"react\": \"^18\",\n+    \"react-dom\": \"^18\",\n+    \"tailwind-merge\": \"^2.0.0\",\n+    \"tailwindcss-animate\": \"^1.0.7\"\n+  },\n+  \"devDependencies\": {\n+    \"@types/node\": \"^20\",\n+    \"@types/react\": \"^18\",\n+    \"@types/react-dom\": \"^18\",\n+    \"autoprefixer\": \"^10.0.1\",\n+    \"eslint\": \"^8\",\n+    \"eslint-config-next\": \"14.0.3\",\n+    \"postcss\": \"^8\",\n+    \"tailwindcss\": \"^3.3.0\",\n+    \"typescript\": \"^5\"\n+  }\n+}\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  }
]