[
  {
    "file_name": "api/server/sql/04-tenant.sql",
    "content": "diff\n--- /dev/null\n+++ api/server/sql/04-tenant.sql\n@@ -0,0 +1,23 @@\n+SET NAMES utf8mb4;\n+\n+CREATE TABLE `tenant`\n+(\n+    `id`                bigint unsigned                                               NOT NULL AUTO_INCREMENT COMMENT '主键',\n+    `tenant_code`       varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci  NOT NULL DEFAULT '' COMMENT '租户编码',\n+    `tenant_name`       varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT '' COMMENT '租户名称',\n+    `tenant_description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT '' COMMENT '租户描述',\n+    `status`            tinyint                                                       NOT NULL DEFAULT '0' COMMENT '删除状态(0未删除，-1已删除)',\n+    `ctime`             datetime                                                      NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n+    `mtime`             datetime                                                      NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '最后一次更新时间',\n+    `owner_uid`         varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci  NOT NULL DEFAULT '' COMMENT '租户拥有人系统号',\n+    `cuid`              bigint                                                        NOT NULL DEFAULT '0' COMMENT '租户创建人系统号',\n+    `muid`              bigint                                                        NOT NULL DEFAULT '0' COMMENT '租户最后一次更新人系统号',\n+    PRIMARY KEY (`id`),\n+    UNIQUE KEY `uniq_idx_tenant_code` (`tenant_code`) USING BTREE\n+) ENGINE = InnoDB\n+  DEFAULT CHARSET = utf8mb4\n+  COLLATE = utf8mb4_0900_ai_ci COMMENT ='租户表';\n+\n+-- Add tenant_code column to space table\n+ALTER TABLE `space` ADD COLUMN `tenant_code` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT '' COMMENT '租户编码' AFTER `space_code`;\n+CREATE INDEX `idx_space_tenant_code` ON `space` (`tenant_code`);\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "api/sdk/src/main/java/com/ke/bella/openapi/tenant/Tenant.java",
    "content": "diff\n--- /dev/null\n+++ api/sdk/src/main/java/com/ke/bella/openapi/tenant/Tenant.java\n@@ -0,0 +1,24 @@\n+package com.ke.bella.openapi.tenant;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.experimental.SuperBuilder;\n+\n+/**\n+ * function: 租户信息\n+ *\n+ * @author chenhongliang001\n+ */\n+@Data\n+@SuperBuilder\n+@AllArgsConstructor\n+@NoArgsConstructor\n+public class Tenant {\n+\n+    private String tenantCode;\n+\n+    private String tenantName;\n+\n+    private String ownerUid;\n+}\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "api/sdk/src/main/java/com/ke/bella/openapi/tenant/CreateTenantOp.java",
    "content": "diff\n--- /dev/null\n+++ api/sdk/src/main/java/com/ke/bella/openapi/tenant/CreateTenantOp.java\n@@ -0,0 +1,48 @@\n+package com.ke.bella.openapi.tenant;\n+\n+import com.ke.bella.openapi.Operator;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.experimental.SuperBuilder;\n+\n+import javax.validation.constraints.NotEmpty;\n+import javax.validation.constraints.Size;\n+\n+/**\n+ * function: 创建租户参数\n+ *\n+ * @author chenhongliang001\n+ */\n+@Data\n+@SuperBuilder\n+@AllArgsConstructor\n+@NoArgsConstructor\n+public class CreateTenantOp extends Operator {\n+\n+    /**\n+     * 租户名称\n+     */\n+    @NotEmpty(message = \"tenantName不能为空\")\n+    @Size(max = 128, message = \"tenantName不能超过128个字符\")\n+    private String tenantName;\n+\n+    /**\n+     * 租户描述\n+     */\n+    @Size(max = 255, message = \"tenantDescription不能超过255个字符\")\n+    private String tenantDescription;\n+\n+    /**\n+     * 租户编码\n+     */\n+    @Size(max = 64, message = \"tenantCode不能超过64个字符\")\n+    private String tenantCode;\n+\n+    /**\n+     * 租户拥有者id\n+     */\n+    @NotEmpty(message = \"ownerUid不能为空\")\n+    @Size(max = 64, message = \"ownerUid不能超过64个字符\")\n+    private String ownerUid;\n+}\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "api/sdk/src/main/java/com/ke/bella/openapi/space/Space.java",
    "content": "diff\n--- api/sdk/src/main/java/com/ke/bella/openapi/space/Space.java\n+++ api/sdk/src/main/java/com/ke/bella/openapi/space/Space.java\n@@ -20,5 +20,7 @@ public class Space {\n \n \tprivate String spaceName;\n \n+\tprivate String tenantCode;\n+\n \tprivate String ownerUid;\n }\n\n",
    "file_content": "package com.ke.bella.openapi.space;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.SuperBuilder;\n\n/**\n * function:\n *\n * @author chenhongliang001\n */\n@Data\n@SuperBuilder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Space {\n\n\tprivate String spaceCode;\n\n\tprivate String spaceName;\n\n\tprivate String ownerUid;\n}\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "api/sdk/src/main/java/com/ke/bella/openapi/space/CreateSpaceOp.java",
    "content": "diff\n--- api/sdk/src/main/java/com/ke/bella/openapi/space/CreateSpaceOp.java\n+++ api/sdk/src/main/java/com/ke/bella/openapi/space/CreateSpaceOp.java\n@@ -39,6 +39,12 @@ public class CreateSpaceOp extends Operator {\n     @Size(max = 64, message = \"spaceCode不能超过64个字符\")\n     private String spaceCode;\n \n+    /**\n+     * 租户编码\n+     */\n+    @Size(max = 64, message = \"tenantCode不能超过64个字符\")\n+    private String tenantCode;\n+\n     /**\n      * 空间拥有者id\n      */\n\n",
    "file_content": "package com.ke.bella.openapi.space;\n\nimport com.ke.bella.openapi.Operator;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.SuperBuilder;\n\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.Size;\n\n/**\n * function: 创建团队参数\n *\n * @author chenhongliang001\n */\n@Data\n@SuperBuilder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CreateSpaceOp extends Operator {\n\n    /**\n     * 空间名称\n     */\n    @NotEmpty(message = \"spaceName不能为空\")\n    @Size(max = 128, message = \"spaceName不能超过128个字符\")\n    private String spaceName;\n\n    /**\n     * 空间描述\n     */\n    @Size(max = 255, message = \"spaceDescription不能超过255个字符\")\n    private String spaceDescription;\n\n    /**\n     * 空间编码\n     */\n    @Size(max = 64, message = \"spaceCode不能超过64个字符\")\n    private String spaceCode;\n\n    /**\n     * 空间拥有者id\n     */\n    @NotEmpty(message = \"ownerUid不能为空\")\n    @Size(max = 64, message = \"ownerUid不能超过64个字符\")\n    private String ownerUid;\n\n    /**\n     * 空间拥有者姓名\n     */\n    @NotEmpty(message = \"ownerName不能为空\")\n    @Size(max = 64, message = \"ownerName不能超过64个字符\")\n    private String ownerName;\n\n}\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "api/server/src/main/java/com/ke/bella/openapi/service/TenantService.java",
    "content": "diff\n--- /dev/null\n+++ api/server/src/main/java/com/ke/bella/openapi/service/TenantService.java\n@@ -0,0 +1,156 @@\n+package com.ke.bella.openapi.service;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.ke.bella.openapi.common.StatusEnum;\n+import com.ke.bella.openapi.common.exception.BizParamCheckException;\n+import com.ke.bella.openapi.db.repo.TenantRepo;\n+import com.ke.bella.openapi.tenant.CreateTenantOp;\n+import com.ke.bella.openapi.tenant.Tenant;\n+import com.ke.bella.openapi.tables.records.TenantRecord;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * function: 租户管理\n+ *\n+ * @author chenhongliang001\n+ */\n+@Component\n+public class TenantService {\n+\n+    public static final String DEFAULT_TENANT_CODE = \"default\";\n+    \n+    @Autowired\n+    private TenantRepo tenantRepo;\n+\n+    /**\n+     * 创建租户\n+     */\n+    @Transactional(rollbackFor = Exception.class)\n+    public String createTenant(CreateTenantOp op) {\n+        if(StringUtils.isEmpty(op.getTenantCode())) {\n+            op.setTenantCode(generateTenantCode());\n+        }\n+        \n+        TenantRecord tenant = tenantRepo.queryTenantByTenantCode(op.getTenantCode());\n+        // 判断租户是否已经存在\n+        if(tenant != null) {\n+            throw new BizParamCheckException(String.format(\"租户编码:%s已经存在\", op.getTenantCode()));\n+        }\n+        // 保存\n+        tenantRepo.createTenant(buildTenant(op));\n+\n+        return op.getTenantCode();\n+    }\n+\n+    /**\n+     * 生成租户编码\n+     */\n+    public String generateTenantCode() {\n+        return UUID.randomUUID().toString();\n+    }\n+\n+    /**\n+     * 构建租户记录\n+     */\n+    private TenantRecord buildTenant(CreateTenantOp tenantCreateOp) {\n+        TenantRecord tenant = new TenantRecord();\n+        BeanUtils.copyProperties(tenantCreateOp, tenant);\n+        fillCreateTenantOperator(tenant, tenantCreateOp.getUserId());\n+        return tenant;\n+    }\n+\n+    /**\n+     * 填充创建租户的操作者信息\n+     */\n+    public void fillCreateTenantOperator(TenantRecord tenantRecord, Long userId) {\n+        tenantRecord.setCuid(userId);\n+        tenantRecord.setMuid(userId);\n+    }\n+\n+    /**\n+     * 根据租户编码查询租户\n+     */\n+    public Tenant queryTenantByTenantCode(String tenantCode) {\n+        TenantRecord tenantRecord = tenantRepo.queryTenantByTenantCode(tenantCode);\n+        if(tenantRecord == null) {\n+            return null;\n+        }\n+        return Tenant.builder()\n+                .tenantName(tenantRecord.getTenantName())\n+                .tenantCode(tenantRecord.getTenantCode())\n+                .ownerUid(tenantRecord.getOwnerUid())\n+                .build();\n+    }\n+\n+    /**\n+     * 获取或创建默认租户\n+     */\n+    public String getOrCreateDefaultTenant() {\n+        TenantRecord tenantRecord = tenantRepo.queryTenantByTenantCode(DEFAULT_TENANT_CODE);\n+        if (tenantRecord != null) {\n+            return DEFAULT_TENANT_CODE;\n+        }\n+        \n+        // 创建默认租户\n+        TenantRecord defaultTenant = new TenantRecord();\n+        defaultTenant.setTenantCode(DEFAULT_TENANT_CODE);\n+        defaultTenant.setTenantName(\"默认租户\");\n+        defaultTenant.setTenantDescription(\"系统默认租户\");\n+        defaultTenant.setOwnerUid(\"0\");\n+        defaultTenant.setCuid(0L);\n+        defaultTenant.setMuid(0L);\n+        defaultTenant.setStatus(StatusEnum.VALID.getCode());\n+        \n+        tenantRepo.createTenant(defaultTenant);\n+        return DEFAULT_TENANT_CODE;\n+    }\n+\n+    /**\n+     * 列出所有租户\n+     */\n+    public List<Tenant> listTenants() {\n+        List<TenantRecord> tenantRecords = tenantRepo.listTenants();\n+        \n+        if(CollectionUtils.isEmpty(tenantRecords)) {\n+            return Collections.emptyList();\n+        }\n+\n+        return tenantRecords.stream()\n+                .map(record -> Tenant.builder()\n+                        .tenantName(record.getTenantName())\n+                        .tenantCode(record.getTenantCode())\n+                        .ownerUid(record.getOwnerUid())\n+                        .build())\n+                .collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * 根据多个租户编码查询租户\n+     */\n+    public List<Tenant> listTenants(List<String> tenantCodes) {\n+        List<TenantRecord> tenantRecords = tenantRepo.queryTenantsByTenantCodes(tenantCodes);\n+        \n+        if(CollectionUtils.isEmpty(tenantRecords)) {\n+            return Collections.emptyList();\n+        }\n+\n+        return tenantRecords.stream()\n+                .map(record -> Tenant.builder()\n+                        .tenantName(record.getTenantName())\n+                        .tenantCode(record.getTenantCode())\n+                        .ownerUid(record.getOwnerUid())\n+                        .build())\n+                .collect(Collectors.toList());\n+    }\n+}\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "api/server/src/main/java/com/ke/bella/openapi/db/repo/TenantRepo.java",
    "content": "diff\n--- /dev/null\n+++ api/server/src/main/java/com/ke/bella/openapi/db/repo/TenantRepo.java\n@@ -0,0 +1,84 @@\n+package com.ke.bella.openapi.db.repo;\n+\n+import com.ke.bella.openapi.Tables;\n+import com.ke.bella.openapi.common.StatusEnum;\n+import com.ke.bella.openapi.tables.records.TenantRecord;\n+import org.apache.commons.lang3.StringUtils;\n+import org.jooq.DSLContext;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.annotation.Resource;\n+import java.util.List;\n+\n+/**\n+ * function: 租户数据操作\n+ *\n+ * @author chenhongliang001\n+ */\n+@Component\n+public class TenantRepo implements BaseRepo {\n+\n+    @Resource\n+    private DSLContext db;\n+\n+    /**\n+     * 根据租户编码查询租户\n+     */\n+    public TenantRecord queryTenantByTenantCode(String tenantCode) {\n+        return db.selectFrom(Tables.TENANT)\n+                .where(Tables.TENANT.TENANT_CODE.eq(tenantCode))\n+                .and(Tables.TENANT.STATUS.eq(StatusEnum.VALID.getCode()))\n+                .fetchOneInto(TenantRecord.class);\n+    }\n+\n+    /**\n+     * 根据多个租户编码查询租户\n+     */\n+    public List<TenantRecord> queryTenantsByTenantCodes(List<String> tenantCodes) {\n+        return db.selectFrom(Tables.TENANT)\n+                .where(Tables.TENANT.TENANT_CODE.in(tenantCodes))\n+                .and(Tables.TENANT.STATUS.eq(StatusEnum.VALID.getCode()))\n+                .fetchInto(TenantRecord.class);\n+    }\n+\n+    /**\n+     * 创建租户\n+     */\n+    @Transactional(rollbackFor = Exception.class)\n+    public void createTenant(TenantRecord record) {\n+        if(StringUtils.isEmpty(record.getTenantDescription())) {\n+            record.setTenantDescription(\"\");\n+        }\n+        db.insertInto(Tables.TENANT).set(record).execute();\n+    }\n+\n+    /**\n+     * 更新租户名称\n+     */\n+    @Transactional(rollbackFor = Exception.class)\n+    public void updateTenantName(String tenantCode, String tenantName, Long muid) {\n+        db.update(Tables.TENANT)\n+                .set(Tables.TENANT.TENANT_NAME, tenantName)\n+                .set(Tables.TENANT.MUID, muid)\n+                .where(Tables.TENANT.TENANT_CODE.eq(tenantCode))\n+                .execute();\n+    }\n+\n+    /**\n+     * 更新租户拥有者\n+     */\n+    @Transactional(rollbackFor = Exception.class)\n+    public void changeTenantOwner(String tenantCode, String ownerUid, Long muid) {\n+        db.update(Tables.TENANT)\n+                .set(Tables.TENANT.OWNER_UID, ownerUid)\n+                .set(Tables.TENANT.MUID, muid)\n+                .where(Tables.TENANT.TENANT_CODE.eq(tenantCode))\n+                .execute();\n+    }\n+\n+    /**\n+     * 列出所有租户\n+     */\n+    public List<TenantRecord> listTenants() {\n+        return db.selectFrom(Tables.TENANT)\n+                .where(Tables.TENANT.STATUS.eq(StatusEnum.VALID.getCode()))\n+                .fetchInto(TenantRecord.class);\n+    }\n+}\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "api/server/src/main/java/com/ke/bella/openapi/endpoints/TenantController.java",
    "content": "diff\n--- /dev/null\n+++ api/server/src/main/java/com/ke/bella/openapi/endpoints/TenantController.java\n@@ -0,0 +1,54 @@\n+package com.ke.bella.openapi.endpoints;\n+\n+import com.ke.bella.openapi.annotations.BellaAPI;\n+import com.ke.bella.openapi.service.TenantService;\n+import com.ke.bella.openapi.tenant.CreateTenantOp;\n+import com.ke.bella.openapi.tenant.Tenant;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.validation.annotation.Validated;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.List;\n+\n+/**\n+ * function: 租户管理\n+ *\n+ * @author chenhongliang001\n+ */\n+@BellaAPI\n+@RestController\n+@RequestMapping(\"/v1/tenant\")\n+@Tag(name = \"租户管理\")\n+public class TenantController {\n+\n+    @Autowired\n+    private TenantService tenantService;\n+\n+    @PostMapping(\"/create\")\n+    public String createTenant(@RequestBody @Validated CreateTenantOp op) {\n+        return tenantService.createTenant(op);\n+    }\n+\n+    @GetMapping(\"/get\")\n+    public Tenant getTenant(@RequestParam String tenantCode) {\n+        return tenantService.queryTenantByTenantCode(tenantCode);\n+    }\n+\n+    @GetMapping(\"/list\")\n+    public List<Tenant> listTenants() {\n+        return tenantService.listTenants();\n+    }\n+    \n+    @GetMapping(\"/list/codes\")\n+    public List<Tenant> listTenantsByCodes(@RequestParam List<String> tenantCodes) {\n+        return tenantService.listTenants(tenantCodes);\n+    }\n+}\n\n",
    "file_content": "",
    "is_create": true,
    "is_modify": false,
    "is_delete": false
  },
  {
    "file_name": "api/server/src/main/java/com/ke/bella/openapi/service/SpaceService.java",
    "content": "diff\n--- api/server/src/main/java/com/ke/bella/openapi/service/SpaceService.java\n+++ api/server/src/main/java/com/ke/bella/openapi/service/SpaceService.java\n@@ -47,8 +47,13 @@ public class SpaceService {\n \n     @Autowired\n     private SpaceRepo spaceRepo;\n+    \n+    @Autowired\n+    private TenantService tenantService;\n \n     @Transactional(rollbackFor = Exception.class)\n+    /**\n+     * 创建空间，支持租户隔离\n+     */\n     public String createSpace(CreateSpaceOp op) {\n \n         if(StringUtils.isEmpty(op.getSpaceCode())) {\n@@ -59,6 +64,14 @@ public class SpaceService {\n         if(space != null) {\n             throw new BizParamCheckException(String.format(\"空间编码:%s已经存在\", op.getSpaceCode()));\n         }\n+        \n+        // 处理租户编码，如果未提供则使用默认租户\n+        if(StringUtils.isEmpty(op.getTenantCode())) {\n+            String defaultTenantCode = tenantService.getOrCreateDefaultTenant();\n+            op.setTenantCode(defaultTenantCode);\n+        } else {\n+            validateTenantExists(op.getTenantCode());\n+        }\n         // 保存\n         spaceRepo.createSpace(buildSpace(op));\n \n@@ -75,6 +88,14 @@ public class SpaceService {\n         role.setMuid(userId);\n     }\n \n+    /**\n+     * 验证租户是否存在\n+     */\n+    private void validateTenantExists(String tenantCode) {\n+        if (tenantService.queryTenantByTenantCode(tenantCode) == null) {\n+            throw new BizParamCheckException(String.format(\"租户不存在: %s\", tenantCode));\n+        }\n+    }\n+\n     @Transactional(rollbackFor = Exception.class)\n     public boolean createRole(CreateRoleOp op) {\n         spaceRepo.batchInsertRole(buildRoles(op.getRoles(), op.getSpaceCode(), op.getUserId()), op.getSpaceCode());\n@@ -229,14 +250,28 @@ public class SpaceService {\n         return members;\n     }\n \n+    /**\n+     * 根据空间编码查询空间，增加租户信息\n+     */\n     public Space querySpaceBySpaceCode(String spaceCode) {\n         SpaceRecord spaceRecord = spaceRepo.querySpaceBySpaceCode(spaceCode);\n         if(spaceRecord == null) {\n             return null;\n         }\n+        \n         return Space.builder()\n                 .spaceName(spaceRecord.getSpaceName())\n                 .spaceCode(spaceRecord.getSpaceCode())\n+                .tenantCode(spaceRecord.getTenantCode())\n+                .ownerUid(spaceRecord.getOwnerUid())\n+                .build();\n+    }\n+    \n+    /**\n+     * 根据空间编码和租户编码查询空间\n+     */\n+    public Space querySpaceBySpaceCodeAndTenantCode(String spaceCode, String tenantCode) {\n+        SpaceRecord spaceRecord = spaceRepo.querySpaceBySpaceCodeAndTenantCode(spaceCode, tenantCode);\n+        if(spaceRecord == null) {\n+            return null;\n+        }\n+        \n+        return Space.builder()\n+                .spaceName(spaceRecord.getSpaceName())\n+                .spaceCode(spaceRecord.getSpaceCode())\n+                .tenantCode(spaceRecord.getTenantCode())\n                 .ownerUid(spaceRecord.getOwnerUid())\n                 .build();\n     }\n@@ -253,6 +288,36 @@ public class SpaceService {\n                 .map(record -> Space.builder()\n                         .spaceName(record.getSpaceName())\n                         .spaceCode(record.getSpaceCode())\n+                        .tenantCode(record.getTenantCode())\n+                        .ownerUid(record.getOwnerUid())\n+                        .build())\n+                .collect(Collectors.toList());\n+    }\n+    \n+    /**\n+     * 根据租户编码查询所有空间\n+     */\n+    public List<Space> listSpacesByTenantCode(String tenantCode) {\n+        // 验证租户是否存在\n+        validateTenantExists(tenantCode);\n+        \n+        List<SpaceRecord> spaceRecords = spaceRepo.querySpacesByTenantCode(tenantCode);\n+\n+        if(CollectionUtils.isEmpty(spaceRecords)) {\n+            return Collections.emptyList();\n+        }\n+\n+        return spaceRecords.stream()\n+                .map(record -> Space.builder()\n+                        .spaceName(record.getSpaceName())\n+                        .spaceCode(record.getSpaceCode())\n+                        .tenantCode(record.getTenantCode())\n+                        .ownerUid(record.getOwnerUid())\n+                        .build())\n+                .collect(Collectors.toList());\n+    }\n+    \n+    /**\n+     * 根据租户编码和空间编码列表查询空间\n+     */\n+    public List<Space> listSpacesByTenantCodeAndSpaceCodes(String tenantCode, List<String> spaceCodes) {\n+        // 验证租户是否存在\n+        validateTenantExists(tenantCode);\n+        \n+        List<SpaceRecord> spaceRecords = spaceRepo.querySpacesByTenantCodeAndSpaceCodes(tenantCode, spaceCodes);\n+\n+        if(CollectionUtils.isEmpty(spaceRecords)) {\n+            return Collections.emptyList();\n+        }\n+\n+        return spaceRecords.stream()\n+                .map(record -> Space.builder()\n+                        .spaceName(record.getSpaceName())\n+                        .spaceCode(record.getSpaceCode())\n+                        .tenantCode(record.getTenantCode())\n                         .ownerUid(record.getOwnerUid())\n                         .build())\n                 .collect(Collectors.toList());\n\n",
    "file_content": "package com.ke.bella.openapi.service;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.ke.bella.openapi.common.RoleCodeEnum;\nimport com.ke.bella.openapi.db.repo.SpaceRepo;\nimport com.ke.bella.openapi.common.exception.BizParamCheckException;\nimport com.ke.bella.openapi.space.ChangeSpaceOwnerOp;\nimport com.ke.bella.openapi.space.CreateMemberOp;\nimport com.ke.bella.openapi.space.CreateRoleDetail;\nimport com.ke.bella.openapi.space.CreateRoleOp;\nimport com.ke.bella.openapi.space.CreateSpaceOp;\nimport com.ke.bella.openapi.space.ExitSpaceOp;\nimport com.ke.bella.openapi.space.Member;\nimport com.ke.bella.openapi.space.RemoveMemberOp;\nimport com.ke.bella.openapi.space.RoleWithSpace;\nimport com.ke.bella.openapi.space.Space;\nimport com.ke.bella.openapi.space.UpdateMemberRoleOp;\nimport com.ke.bella.openapi.space.UpdateSpaceNameOp;\nimport com.ke.bella.openapi.tables.records.SpaceMemberRecord;\nimport com.ke.bella.openapi.tables.records.SpaceRecord;\nimport com.ke.bella.openapi.tables.records.SpaceRoleRecord;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n/**\n * function: 空间\n *\n * @author chenhongliang001\n */\n@Component\npublic class SpaceService {\n\n    @Autowired\n    private SpaceRepo spaceRepo;\n\n    @Transactional(rollbackFor = Exception.class)\n    public String createSpace(CreateSpaceOp op) {\n\n        if(StringUtils.isEmpty(op.getSpaceCode())) {\n            op.setSpaceCode(generateSpaceCode());\n        }\n        SpaceRecord space = spaceRepo.querySpaceBySpaceCode(op.getSpaceCode());\n        // 判断空间是否已经存在\n        if(space != null) {\n            throw new BizParamCheckException(String.format(\"空间编码:%s已经存在\", op.getSpaceCode()));\n        }\n        // 保存\n        spaceRepo.createSpace(buildSpace(op));\n\n        return op.getSpaceCode();\n    }\n\n    public void fillCreateSpaceOperator(SpaceRecord spaceRecord, Long userId) {\n        spaceRecord.setCuid(userId);\n        spaceRecord.setMuid(userId);\n    }\n\n    public void fillCreateRoleOperator(SpaceRoleRecord role, Long userId) {\n        role.setCuid(userId);\n        role.setMuid(userId);\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public boolean createRole(CreateRoleOp op) {\n        spaceRepo.batchInsertRole(buildRoles(op.getRoles(), op.getSpaceCode(), op.getUserId()), op.getSpaceCode());\n        return true;\n    }\n\n    private List<SpaceRoleRecord> buildRoles(List<CreateRoleDetail> details, String spaceCode, Long userId) {\n        if(CollectionUtils.isEmpty(details)) {\n            return Lists.newArrayList();\n        }\n        List<SpaceRoleRecord> roles = Lists.newArrayList();\n        for (CreateRoleDetail detail : details) {\n            SpaceRoleRecord role = new SpaceRoleRecord();\n            BeanUtils.copyProperties(detail, role);\n            role.setSpaceCode(spaceCode);\n            fillCreateRoleOperator(role, userId);\n            roles.add(role);\n        }\n        return roles;\n    }\n\n    private SpaceRecord buildSpace(CreateSpaceOp spaceCreateOp) {\n        SpaceRecord space = new SpaceRecord();\n        BeanUtils.copyProperties(spaceCreateOp, space);\n        fillCreateSpaceOperator(space, spaceCreateOp.getUserId());\n        return space;\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public Boolean updateSpaceName(UpdateSpaceNameOp op) {\n        spaceRepo.updateSpaceName(op.getSpaceCode(), op.getSpaceName(), op.getUserId());\n        return true;\n    }\n\n    public String generateSpaceCode() {\n        return UUID.randomUUID().toString();\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public Boolean changeSpaceOwner(ChangeSpaceOwnerOp op) {\n\n        // 只有空间拥有者才能将自己的空间转给其它人\n        SpaceRecord space = spaceRepo.querySpaceBySpaceCode(op.getSpaceCode());\n        if(space == null) {\n            throw new BizParamCheckException(String.format(\"转让空间失败，空间:%s不存在\", op.getSpaceCode()));\n        }\n        if(!Objects.equals(space.getOwnerUid(), String.valueOf(op.getUserId()))) {\n            throw new BizParamCheckException(\"只有空间拥有者有权限将团队转让给其他人\");\n        }\n\n        // 转让人必须在空间内\n        SpaceMemberRecord member = spaceRepo.queryBySpaceCodeAndMemberUid(op.getSpaceCode(), op.getOwnerUid());\n        if(member == null) {\n            throw new BizParamCheckException(\"新的拥有者必须在空间内，请先将心的拥有者添加到空间中\");\n        }\n        // 空间转让\n        spaceRepo.changeSpaceOwner(op.getSpaceCode(), op.getOwnerUid(), op.getUserId());\n\n        // 成员表设置，原拥有者变更为管理员\n        spaceRepo.updateMemberRole(op.getUserId(), space.getOwnerUid(),\n                op.getSpaceCode(), RoleCodeEnum.ADMIN.getCode());\n        // 成员表设置，设置新拥有者\n        spaceRepo.updateMemberRole(op.getUserId(), op.getOwnerUid(),\n                op.getSpaceCode(), RoleCodeEnum.OWNER.getCode());\n\n        return true;\n\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public Boolean createMember(CreateMemberOp op) {\n\n        SpaceRecord space = spaceRepo.querySpaceBySpaceCode(op.getSpaceCode());\n        if(space == null) {\n            throw new BizParamCheckException(String.format(\"空间不存在:%s\", op.getSpaceCode()));\n        }\n\n        List<String> memberUids = op.getMembers().stream()\n                .map(CreateMemberOp.Member::getMemberUid)\n                .collect(Collectors.toList());\n\n        List<SpaceMemberRecord> existingMembers = spaceRepo.queryMemberByTeamCodeAndMemberUids(op.getSpaceCode(), memberUids);\n        Set<String> existingMemberUids = existingMembers.stream()\n                .map(SpaceMemberRecord::getMemberUid)\n                .collect(Collectors.toSet());\n\n        Set<String> duplicates = memberUids.stream()\n                .filter(existingMemberUids::contains)\n                .collect(Collectors.toSet());\n\n        if(!duplicates.isEmpty()) {\n            throw new BizParamCheckException(String.format(\"重复添加成员: %s\", duplicates));\n        }\n\n        List<SpaceMemberRecord> newMembers = op.getMembers().stream()\n                .map(m -> {\n                    SpaceMemberRecord record = new SpaceMemberRecord();\n                    BeanUtils.copyProperties(m, record);\n                    record.setCuid(op.getUserId());\n                    record.setMuid(op.getUserId());\n                    record.setSpaceCode(op.getSpaceCode());\n                    record.setRoleCode(op.getRoleCode());\n                    return record;\n                })\n                .collect(Collectors.toList());\n\n        spaceRepo.batchInsertMember(newMembers);\n        return true;\n    }\n\n    public Boolean removeMember(RemoveMemberOp op) {\n\n        SpaceMemberRecord member = spaceRepo.queryMemberBySpaceCodeAndMemberUid(op.getSpaceCode(), op.getMemberUid());\n        if(member == null) {\n            throw new BizParamCheckException(\"成员不存在无法删除\");\n        }\n\n        spaceRepo.removeMember(op.getUserId(), op.getMemberUid(), op.getSpaceCode());\n        return true;\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public Boolean updateMember(UpdateMemberRoleOp op) {\n        spaceRepo.updateMemberRole(op.getUserId(), op.getMemberUid(), op.getSpaceCode(), op.getRoleCode());\n        return true;\n    }\n\n    public Boolean exitSpace(ExitSpaceOp op) {\n        SpaceMemberRecord member = spaceRepo.queryBySpaceCodeAndMemberUid(op.getSpaceCode(), op.getMemberUid());\n        if(member == null) {\n            throw new BizParamCheckException(String.format(\"退出空间失败，用户:%s不在此空间中\", op.getMemberUid()));\n        }\n        spaceRepo.removeMember(op.getUserId(), op.getMemberUid(), op.getSpaceCode());\n        return true;\n    }\n\n    public List<Member> listMember(String spaceCode) {\n        List<SpaceMemberRecord> records = spaceRepo.listBySpaceCode(spaceCode);\n        if(CollectionUtils.isEmpty(records)) {\n            return Lists.newArrayList();\n        }\n\n        List<Member> members = Lists.newArrayList();\n        for (SpaceMemberRecord record : records) {\n            members.add(Member.builder()\n                    .roleCode(record.getRoleCode())\n                    .spaceCode(record.getSpaceCode())\n                    .memberUid(record.getMemberUid())\n                    .memberName(record.getMemberName())\n                    .build());\n        }\n        return members;\n    }\n\n    public Space querySpaceBySpaceCode(String spaceCode) {\n        SpaceRecord spaceRecord = spaceRepo.querySpaceBySpaceCode(spaceCode);\n        if(spaceRecord == null) {\n            return null;\n        }\n        return Space.builder()\n                .spaceName(spaceRecord.getSpaceName())\n                .spaceCode(spaceRecord.getSpaceCode())\n                .ownerUid(spaceRecord.getOwnerUid())\n                .build();\n    }\n\n    public List<Space> listSpace(List<String> spaceCodes) {\n\n        List<SpaceRecord> spaceRecords = spaceRepo.querySpaceBySpaceCodes(spaceCodes);\n\n        if(CollectionUtils.isEmpty(spaceRecords)) {\n            return Collections.emptyList();\n        }\n\n        return spaceRecords.stream()\n                .map(record -> Space.builder()\n                        .spaceName(record.getSpaceName())\n                        .spaceCode(record.getSpaceCode())\n                        .ownerUid(record.getOwnerUid())\n                        .build())\n                .collect(Collectors.toList());\n    }\n\n    public List<RoleWithSpace> listRole(String memberUid) {\n\n        List<RoleWithSpace> rolesAll = Lists.newArrayList();\n        rolesAll.add(RoleWithSpace.builder()\n                .roleCode(RoleCodeEnum.OWNER.getCode())\n                .spaceCode(memberUid)\n                .spaceName(\"个人空间\").build());\n\n        List<SpaceMemberRecord> members = spaceRepo.listMemberByMemberUid(memberUid);\n        if(CollectionUtils.isEmpty(members)) {\n            return rolesAll;\n        }\n\n        // 收集唯一的空间编码\n        Set<String> spaceCodes = members.stream()\n                .map(SpaceMemberRecord::getSpaceCode)\n                .collect(Collectors.toSet());\n\n        // 查询团队信息并转换为 Map\n        Map<String, SpaceRecord> spaceMap = queryMapBySpaceCodes(new ArrayList<>(spaceCodes));\n\n        // 构建团队角色列表，并设置团队名称\n        List<RoleWithSpace> roles = members.stream()\n                .map(member -> {\n                    RoleWithSpace role = new RoleWithSpace();\n                    role.setRoleCode(member.getRoleCode());\n                    role.setSpaceCode(member.getSpaceCode());\n                    SpaceRecord space = spaceMap.get(member.getSpaceCode());\n                    if(space != null) {\n                        role.setSpaceName(space.getSpaceName());\n                    }\n                    return role;\n                })\n                .collect(Collectors.toList());\n        if(CollectionUtils.isNotEmpty(roles)) {\n            rolesAll.addAll(roles);\n        }\n        return rolesAll;\n    }\n\n    public RoleWithSpace getMemberRole(String memberUid, String spaceCode) {\n\n        if(Objects.equals(memberUid, spaceCode)) {\n            return RoleWithSpace.builder()\n                    .roleCode(RoleCodeEnum.OWNER.getCode())\n                    .spaceCode(spaceCode)\n                    .spaceName(\"个人空间\")\n                    .build();\n        }\n\n        SpaceMemberRecord member = spaceRepo.queryMemberBySpaceCodeAndMemberUid(spaceCode, memberUid);\n        if(member == null) {\n            return null;\n        }\n\n        SpaceRecord space = spaceRepo.querySpaceBySpaceCode(spaceCode);\n        return RoleWithSpace.builder()\n                .roleCode(member.getRoleCode())\n                .spaceCode(member.getSpaceCode())\n                .spaceName(space != null ? space.getSpaceName() : \"\")\n                .build();\n    }\n\n    public List<String> listSpaceCode() {\n        return spaceRepo.listSpaceCode();\n    }\n\n    public Map<String, SpaceRecord> queryMapBySpaceCodes(List<String> spaceCodes) {\n\n        if(CollectionUtils.isEmpty(spaceCodes)) {\n            return Maps.newHashMap();\n        }\n\n        List<SpaceRecord> spaces = spaceRepo.listBySpaceCodes(spaceCodes);\n        if(CollectionUtils.isEmpty(spaces)) {\n            return Maps.newHashMap();\n        }\n\n        return spaces.stream().collect(Collectors.toMap(\n                SpaceRecord::getSpaceCode,\n                Function.identity(),\n                (existing, replacement) -> existing // 如果有重复键，保留已有的值\n        ));\n\n    }\n\n}\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "api/server/src/main/java/com/ke/bella/openapi/db/repo/SpaceRepo.java",
    "content": "diff\n--- api/server/src/main/java/com/ke/bella/openapi/db/repo/SpaceRepo.java\n+++ api/server/src/main/java/com/ke/bella/openapi/db/repo/SpaceRepo.java\n@@ -34,6 +34,16 @@ public class SpaceRepo implements BaseRepo {\n+    /**\n+     * 根据空间编码和租户编码查询空间\n+     */\n+    public SpaceRecord querySpaceBySpaceCodeAndTenantCode(String spaceCode, String tenantCode) {\n+        return db.selectFrom(Tables.SPACE)\n+                .where(Tables.SPACE.SPACE_CODE.eq(spaceCode))\n+                .and(Tables.SPACE.TENANT_CODE.eq(tenantCode))\n+                .and(Tables.SPACE.STATUS.eq(StatusEnum.VALID.getCode()))\n+                .fetchOneInto(SpaceRecord.class);\n+    }\n+\n     public List<SpaceRecord> querySpaceBySpaceCodes(List<String> spaceCodes) {\n         return db.selectFrom(Tables.SPACE)\n                 .where(Tables.SPACE.SPACE_CODE.in(spaceCodes))\n@@ -41,6 +51,26 @@ public class SpaceRepo implements BaseRepo {\n                 .fetchInto(SpaceRecord.class);\n     }\n \n+    /**\n+     * 根据租户编码查询空间\n+     */\n+    public List<SpaceRecord> querySpacesByTenantCode(String tenantCode) {\n+        return db.selectFrom(Tables.SPACE)\n+                .where(Tables.SPACE.TENANT_CODE.eq(tenantCode))\n+                .and(Tables.SPACE.STATUS.eq(StatusEnum.VALID.getCode()))\n+                .fetchInto(SpaceRecord.class);\n+    }\n+\n+    /**\n+     * 根据租户编码和空间编码列表查询空间\n+     */\n+    public List<SpaceRecord> querySpacesByTenantCodeAndSpaceCodes(String tenantCode, List<String> spaceCodes) {\n+        return db.selectFrom(Tables.SPACE)\n+                .where(Tables.SPACE.TENANT_CODE.eq(tenantCode))\n+                .and(Tables.SPACE.SPACE_CODE.in(spaceCodes))\n+                .and(Tables.SPACE.STATUS.eq(StatusEnum.VALID.getCode()))\n+                .fetchInto(SpaceRecord.class);\n+    }\n+\n     @Transactional(rollbackFor = Exception.class)\n     public void createSpace(SpaceRecord record) {\n         if(StringUtils.isEmpty(record.getSpaceDescription())) {\n\n",
    "file_content": "package com.ke.bella.openapi.db.repo;\n\nimport com.ke.bella.openapi.Tables;\nimport com.ke.bella.openapi.common.StatusEnum;\nimport com.ke.bella.openapi.common.exception.BizParamCheckException;\nimport com.ke.bella.openapi.tables.records.SpaceMemberRecord;\nimport com.ke.bella.openapi.tables.records.SpaceRecord;\nimport com.ke.bella.openapi.tables.records.SpaceRoleRecord;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jooq.DSLContext;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.annotation.Resource;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * function:\n *\n * @author chenhongliang001\n */\n@Component\npublic class SpaceRepo implements BaseRepo {\n\n    @Resource\n    private DSLContext db;\n\n    public SpaceRecord querySpaceBySpaceCode(String spaceCode) {\n        return db.selectFrom(Tables.SPACE)\n                .where(Tables.SPACE.SPACE_CODE.eq(spaceCode))\n                .and(Tables.SPACE.STATUS.eq(StatusEnum.VALID.getCode()))\n                .fetchOneInto(SpaceRecord.class);\n    }\n\n    public List<SpaceRecord> querySpaceBySpaceCodes(List<String> spaceCodes) {\n        return db.selectFrom(Tables.SPACE)\n                .where(Tables.SPACE.SPACE_CODE.in(spaceCodes))\n                .and(Tables.SPACE.STATUS.eq(StatusEnum.VALID.getCode()))\n                .fetchInto(SpaceRecord.class);\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void createSpace(SpaceRecord record) {\n        if(StringUtils.isEmpty(record.getSpaceDescription())) {\n            record.setSpaceDescription(\"\");\n        }\n        db.insertInto(Tables.SPACE).set(record).execute();\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void batchInsertRole(List<SpaceRoleRecord> roles, String spaceCode) {\n        if(CollectionUtils.isEmpty(roles)) {\n            return;\n        }\n\n        // 收集所有的角色代码\n        List<String> roleCodes = roles.stream()\n                .map(SpaceRoleRecord::getRoleCode)\n                .collect(Collectors.toList());\n\n        // 查询数据库中已存在的角色\n        List<SpaceRoleRecord> rolesFromDb = queryRoleByTeamCodeAndRoleCode(spaceCode, roleCodes);\n\n        // 如果存在重复的角色代码，抛出异常\n        if(CollectionUtils.isNotEmpty(rolesFromDb)) {\n            String duplicateRoles = rolesFromDb.stream()\n                    .map(SpaceRoleRecord::getRoleCode)\n                    .collect(Collectors.joining(\",\"));\n            throw new BizParamCheckException(String.format(\"保存角色失败，部分角色编码已经存在:%s\", duplicateRoles));\n        }\n\n        // 设置角色描述为空字符串（如果原本为空）\n        roles.forEach(role -> {\n            if(StringUtils.isEmpty(role.getRoleDesc())) {\n                role.setRoleDesc(\"\");\n            }\n        });\n\n        db.batchInsert(roles).execute();\n    }\n\n    public List<SpaceRoleRecord> queryRoleByTeamCodeAndRoleCode(String spaceCode, List<String> roleCodes) {\n        return db.selectFrom(Tables.SPACE_ROLE)\n                .where(Tables.SPACE_ROLE.SPACE_CODE.eq(spaceCode))\n                .and(Tables.SPACE_ROLE.ROLE_CODE.in(roleCodes))\n                .and(Tables.SPACE_ROLE.STATUS.eq(StatusEnum.VALID.getCode()))\n                .fetchInto(SpaceRoleRecord.class);\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void updateSpaceName(String spaceCode, String spaceName, Long muid) {\n        db.update(Tables.SPACE)\n                .set(Tables.SPACE.SPACE_NAME, spaceName)\n                .set(Tables.SPACE.MUID, muid)\n                .where(Tables.SPACE.SPACE_CODE.eq(spaceCode))\n                .execute();\n    }\n\n    public SpaceMemberRecord queryBySpaceCodeAndMemberUid(String spaceCode, String memberUid) {\n        return db.selectFrom(Tables.SPACE_MEMBER)\n                .where(Tables.SPACE_MEMBER.SPACE_CODE.eq(spaceCode))\n                .and(Tables.SPACE_MEMBER.MEMBER_UID.eq(memberUid))\n                .and(Tables.SPACE_MEMBER.STATUS.eq(StatusEnum.VALID.getCode()))\n                .fetchOneInto(SpaceMemberRecord.class);\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void changeSpaceOwner(String spaceCode, String ownerUid, Long muid) {\n        db.update(Tables.SPACE)\n                .set(Tables.SPACE.OWNER_UID, ownerUid)\n                .set(Tables.SPACE.MUID, muid)\n                .where(Tables.SPACE.SPACE_CODE.eq(spaceCode))\n                .execute();\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void updateMemberRole(Long muid, String memberUid, String spaceCode, String roleCode) {\n        db.update(Tables.SPACE_MEMBER)\n                .set(Tables.SPACE_MEMBER.MUID, muid)\n                .set(Tables.SPACE_MEMBER.ROLE_CODE, roleCode)\n                .where(Tables.SPACE_MEMBER.SPACE_CODE.eq(spaceCode))\n                .and(Tables.SPACE_MEMBER.MEMBER_UID.eq(memberUid))\n                .execute();\n    }\n\n    public List<SpaceMemberRecord> queryMemberByTeamCodeAndMemberUids(String spaceCode, List<String> memberUids) {\n        return db.selectFrom(Tables.SPACE_MEMBER)\n                .where(Tables.SPACE_MEMBER.SPACE_CODE.eq(spaceCode))\n                .and(Tables.SPACE_MEMBER.MEMBER_UID.in(memberUids))\n                .and(Tables.SPACE_MEMBER.STATUS.eq(StatusEnum.VALID.getCode()))\n                .fetchInto(SpaceMemberRecord.class);\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void batchInsertMember(List<SpaceMemberRecord> records) {\n        if(records != null && !records.isEmpty()) {\n            db.batchInsert(records).execute();\n        }\n    }\n\n    public SpaceMemberRecord queryMemberBySpaceCodeAndMemberUid(String spaceCode, String memberUid) {\n        return db.selectFrom(Tables.SPACE_MEMBER)\n                .where(Tables.SPACE_MEMBER.SPACE_CODE.eq(spaceCode))\n                .and(Tables.SPACE_MEMBER.MEMBER_UID.eq(memberUid))\n                .and(Tables.SPACE_MEMBER.STATUS.eq(StatusEnum.VALID.getCode()))\n                .fetchOneInto(SpaceMemberRecord.class);\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void removeMember(Long muid, String memberUid, String spaceCode) {\n        db.update(Tables.SPACE_MEMBER)\n                .set(Tables.SPACE_MEMBER.STATUS, StatusEnum.INVALID.getCode())\n                .set(Tables.SPACE_MEMBER.MUID, muid)\n                .where(Tables.SPACE_MEMBER.SPACE_CODE.eq(spaceCode))\n                .and(Tables.SPACE_MEMBER.MEMBER_UID.eq(memberUid))\n                .execute();\n    }\n\n    public List<String> listSpaceCode() {\n        return db.select(Tables.SPACE.SPACE_CODE)\n                .from(Tables.SPACE)\n                .where(Tables.SPACE.STATUS.eq(StatusEnum.VALID.getCode()))\n                .fetch(Tables.SPACE.SPACE_CODE);\n    }\n\n    public List<SpaceMemberRecord> listBySpaceCode(String spaceCode) {\n        return db.selectFrom(Tables.SPACE_MEMBER)\n                .where(Tables.SPACE_MEMBER.SPACE_CODE.eq(spaceCode))\n                .and(Tables.SPACE_MEMBER.STATUS.eq(StatusEnum.VALID.getCode()))\n                .fetchInto(SpaceMemberRecord.class);\n    }\n\n    public List<SpaceRecord> listBySpaceCodes(List<String> spaceCodes) {\n        return db.selectFrom(Tables.SPACE)\n                .where(Tables.SPACE.SPACE_CODE.in(spaceCodes))\n                .and(Tables.SPACE.STATUS.eq(StatusEnum.VALID.getCode()))\n                .fetchInto(SpaceRecord.class);\n    }\n\n    public List<SpaceMemberRecord> listMemberByMemberUid(String memberUid) {\n        return db.selectFrom(Tables.SPACE_MEMBER)\n                .where(Tables.SPACE_MEMBER.MEMBER_UID.eq(memberUid))\n                .and(Tables.SPACE_MEMBER.STATUS.eq(StatusEnum.VALID.getCode()))\n                .fetchInto(SpaceMemberRecord.class);\n    }\n\n}\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  },
  {
    "file_name": "api/server/src/main/java/com/ke/bella/openapi/endpoints/SpaceController.java",
    "content": "diff\n--- api/server/src/main/java/com/ke/bella/openapi/endpoints/SpaceController.java\n+++ api/server/src/main/java/com/ke/bella/openapi/endpoints/SpaceController.java\n@@ -54,11 +54,21 @@ public class SpaceController {\n         return spaceService.querySpaceBySpaceCode(spaceCode);\n     }\n \n+    @GetMapping(\"/get/tenant\")\n+    public Space getSpaceByTenant(@RequestParam String spaceCode, @RequestParam String tenantCode) {\n+        return spaceService.querySpaceBySpaceCodeAndTenantCode(spaceCode, tenantCode);\n+    }\n+\n     @GetMapping(\"/list\")\n     public List<Space> listSpace(@RequestParam List<String> spaceCodes) {\n         return spaceService.listSpace(spaceCodes);\n     }\n \n+    @GetMapping(\"/list/tenant\")\n+    public List<Space> listSpaceByTenant(@RequestParam String tenantCode, @RequestParam(required = false) List<String> spaceCodes) {\n+        return spaceCodes == null ? spaceService.listSpacesByTenantCode(tenantCode) : \n+                                    spaceService.listSpacesByTenantCodeAndSpaceCodes(tenantCode, spaceCodes);\n+    }\n+\n     @PostMapping(\"/owner/change\")\n     public Boolean changeSpaceOwner(@RequestBody ChangeSpaceOwnerOp op) {\n         return spaceService.changeSpaceOwner(op);\n\n",
    "file_content": "package com.ke.bella.openapi.endpoints;\n\nimport com.ke.bella.openapi.annotations.BellaAPI;\nimport com.ke.bella.openapi.service.SpaceService;\nimport com.ke.bella.openapi.space.CreateMemberOp;\nimport com.ke.bella.openapi.space.ExitSpaceOp;\nimport com.ke.bella.openapi.space.Member;\nimport com.ke.bella.openapi.space.RemoveMemberOp;\nimport com.ke.bella.openapi.space.RoleWithSpace;\nimport com.ke.bella.openapi.space.Space;\nimport com.ke.bella.openapi.space.UpdateMemberRoleOp;\nimport com.ke.bella.openapi.space.CreateRoleOp;\nimport com.ke.bella.openapi.space.CreateSpaceOp;\nimport com.ke.bella.openapi.space.UpdateSpaceNameOp;\nimport com.ke.bella.openapi.space.ChangeSpaceOwnerOp;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n/**\n * function: 空间管理\n *\n * @author chenhongliang001\n */\n@BellaAPI\n@RestController\n@RequestMapping(\"/v1/space\")\n@Tag(name = \"空间管理\")\npublic class SpaceController {\n\n    @Autowired\n    private SpaceService spaceService;\n\n    @PostMapping(\"/create\")\n    public String createSpace(@RequestBody @Validated CreateSpaceOp op) {\n        return spaceService.createSpace(op);\n    }\n\n    @PostMapping(\"/name/update\")\n    public Boolean updateSpaceName(@RequestBody @Validated UpdateSpaceNameOp op) {\n        return spaceService.updateSpaceName(op);\n    }\n\n    @GetMapping(\"/get\")\n    public Space getSpace(@RequestParam String spaceCode) {\n        return spaceService.querySpaceBySpaceCode(spaceCode);\n    }\n\n    @GetMapping(\"/list\")\n    public List<Space> listSpace(@RequestParam List<String> spaceCodes) {\n        return spaceService.listSpace(spaceCodes);\n    }\n\n    @PostMapping(\"/owner/change\")\n    public Boolean changeSpaceOwner(@RequestBody ChangeSpaceOwnerOp op) {\n        return spaceService.changeSpaceOwner(op);\n    }\n\n    @PostMapping(\"/role/create\")\n    public Boolean createRole(@RequestBody @Validated CreateRoleOp op) {\n        return spaceService.createRole(op);\n    }\n\n    @GetMapping(\"/role/list\")\n    public List<RoleWithSpace> listRole(@RequestParam String memberUid) {\n        return spaceService.listRole(memberUid);\n    }\n\n    @PostMapping(\"/member/create\")\n    public Boolean createMember(@RequestBody @Validated CreateMemberOp op) {\n        return spaceService.createMember(op);\n    }\n\n    @PostMapping(\"/member/remove\")\n    public Boolean removeMember(@RequestBody @Validated RemoveMemberOp op) {\n        return spaceService.removeMember(op);\n    }\n\n    @PostMapping(\"/member/update\")\n    public Boolean updateMember(@RequestBody @Validated UpdateMemberRoleOp op) {\n        return spaceService.updateMember(op);\n    }\n\n    @PostMapping(\"/member/exit\")\n    public Boolean exitSpace(@RequestBody @Validated ExitSpaceOp op) {\n        return spaceService.exitSpace(op);\n    }\n\n    @GetMapping(\"/member/list\")\n    public List<Member> listMember(@RequestParam String spaceCode) {\n        return spaceService.listMember(spaceCode);\n    }\n\n    @GetMapping(\"/member/role\")\n    public RoleWithSpace getMemberRole(@RequestParam String memberUid, @RequestParam String spaceCode) {\n        return spaceService.getMemberRole(memberUid, spaceCode);\n    }\n\n}\n",
    "is_create": false,
    "is_modify": true,
    "is_delete": false
  }
]